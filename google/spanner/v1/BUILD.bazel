# This is an API workspace, having public visibility by default makes perfect sense.
package(default_visibility = ["//visibility:public"])

##############################################################################
# Common
##############################################################################
load("@com_google_api_codegen//rules_gapic:gapic.bzl", "proto_library_with_info")

proto_library(
    name = "keys_proto",
    srcs = ["keys.proto"],
    deps = [
        "//google/api:annotations_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)

proto_library(
    name = "mutation_proto",
    srcs = ["mutation.proto"],
    deps = [
        ":keys_proto",
        "//google/api:annotations_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)

proto_library(
    name = "query_plan_proto",
    srcs = ["query_plan.proto"],
    deps = [
        "//google/api:annotations_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)

proto_library(
    name = "result_set_proto",
    srcs = ["result_set.proto"],
    deps = [
        ":query_plan_proto",
        ":transaction_proto",
        ":type_proto",
        "//google/api:annotations_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)

proto_library(
    name = "spanner_proto",
    srcs = ["spanner.proto"],
    deps = [
        ":keys_proto",
        ":mutation_proto",
        ":result_set_proto",
        ":transaction_proto",
        ":type_proto",
        "//google/api:annotations_proto",
        "//google/rpc:status_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:struct_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

proto_library(
    name = "transaction_proto",
    srcs = ["transaction.proto"],
    deps = [
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:timestamp_proto",
        "//google/api:annotations_proto",
    ],
)

proto_library(
    name = "type_proto",
    srcs = ["type.proto"],
    deps = [
        "//google/api:annotations_proto",
    ],
)

proto_library_with_info(
    name = "spanner_proto_with_info",
    deps = [":spanner_proto"],
)

##############################################################################
# Java
##############################################################################
load("@io_grpc_grpc_java//:java_grpc_library.bzl", "java_grpc_library")
load(
    "@com_google_api_codegen//rules_gapic/java:java_gapic.bzl",
    "java_gapic_library",
    "java_resource_name_proto_library",
)
load("@com_google_api_codegen//rules_gapic/java:java_gapic_pkg.bzl", "java_gapic_assembly_gradle_pkg")

_JAVA_GRPC_DEPS = [
    "@com_google_api_grpc_proto_google_common_protos//jar",
]

java_proto_library(
    name = "spanner_java_proto",
    deps = [":spanner_proto"],
)

java_grpc_library(
    name = "spanner_java_grpc",
    srcs = [":spanner_proto"],
    deps = [":spanner_java_proto"] + _JAVA_GRPC_DEPS,
)

java_resource_name_proto_library(
    name = "spanner_resource_name_java_proto",
    gapic_yaml = "spanner_gapic.yaml",
    deps = [":spanner_proto"],
)

java_gapic_library(
    name = "spanner_java_gapic",
    src = ":spanner_proto_with_info",
    gapic_yaml = "spanner_gapic.yaml",
    service_yaml = "//google/spanner:spanner.yaml",
    test_deps = [":spanner_java_grpc"],
    deps = [
        ":spanner_java_proto",
        ":spanner_resource_name_java_proto",
    ] + _JAVA_GRPC_DEPS,
)

[java_test(
    name = test_name,
    test_class = test_name,
    runtime_deps = [
        ":spanner_java_gapic_test",
    ],
) for test_name in [
    "com.google.cloud.spanner.v1.SpannerClientTest",
]]

# Opensource Packages
java_gapic_assembly_gradle_pkg(
    name = "google-cloud-spanner-v1-java",
    client_deps = [":spanner_java_gapic"],
    client_group = "com.google.cloud",
    client_test_deps = [":spanner_java_gapic_test"],
    grpc_deps = [":spanner_java_grpc"],
    grpc_group = "com.google.api.grpc",
    proto_deps = [
        ":spanner_java_proto",
        ":spanner_proto",
        ":spanner_resource_name_java_proto",
    ] + _JAVA_GRPC_DEPS,
    version = "0.0.0-SNAPSHOT",
)

##############################################################################
# Go
##############################################################################
load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@com_google_api_codegen//rules_gapic/go:go_gapic.bzl", "go_gapic_srcjar", "go_gapic_library")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("@com_google_api_codegen//rules_gapic/go:go_gapic_pkg.bzl", "go_gapic_assembly_pkg")

go_proto_library(
    name = "spanner_go_proto",
    compilers = ["@io_bazel_rules_go//proto:go_grpc"],
    importpath = "google.golang.org/genproto/googleapis/spanner/v1",
    protos = [":spanner_proto_with_info"],
    deps = [
        "//google/api:annotations_go_proto",
        "//google/rpc:status_go_proto",
    ],
)

go_gapic_library(
    name = "spanner_go_gapic",
    src = ":spanner_proto_with_info",
    gapic_yaml = "spanner_gapic.yaml",
    importpath = "cloud.google.com/go/spanner/apiv1",
    service_yaml = "//google/spanner:spanner.yaml",
    deps = [":spanner_go_proto"],
)

go_test(
    name = "spanner_go_gapic_test",
    srcs = [":spanner_go_gapic_srcjar_test"],
    embed = [":spanner_go_gapic"],
    importpath = "cloud.google.com/go/spanner/apiv1",
)

# Opensource Packages
go_gapic_assembly_pkg(
    name = "gapi-cloud-spanner-v1-go",
    deps = [
        ":spanner_go_gapic",
        ":spanner_go_gapic_srcjar-smoke-test.srcjar",
        ":spanner_go_gapic_srcjar-test.srcjar",
        ":spanner_go_proto",
    ],
)

##############################################################################
# C++
##############################################################################
load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")

cc_proto_library (
    name = "keys_cc_proto",
    deps = [":keys_proto"],
)

cc_proto_library (
    name = "mutation_cc_proto",
    deps = [":mutation_proto"],
)

cc_proto_library (
    name = "query_plan_cc_proto",
    deps = [":query_plan_proto"],
)

cc_proto_library (
    name = "type_cc_proto",
    deps = [":type_proto"],
)

cc_proto_library (
    name = "transaction_cc_proto",
    deps = [":transaction_proto"],
)

cc_proto_library (
    name = "result_set_cc_proto",
    deps = [":result_set_proto"],
)

cc_proto_library (
    name = "spanner_cc_proto",
    deps = [
        ":spanner_proto",
    ],
)

cc_grpc_library(
    name = "spanner_cc_grpc",
    srcs = [":spanner_proto"],
    grpc_only = True,
    well_known_protos = True,
    deps = [
        ":spanner_cc_proto",
        ":transaction_cc_proto",
        ":type_cc_proto",
        "//google/api:annotations_cc_proto",
        ":keys_cc_proto",
        ":mutation_cc_proto",
        ":result_set_cc_proto",
    ],
)
