# This file was automatically generated by BuildFileGenerator
# https://github.com/googleapis/rules_gapic/tree/master/bazel

# Most of the manual changes to this file will be overwritten.
# It's **only** allowed to change the following rule attribute values:
# - names of *_gapic_assembly_* rules
# - certain parameters of *_gapic_library rules, including but not limited to:
#    * extra_protoc_parameters
#    * extra_protoc_file_parameters
# The complete list of preserved parameters can be found in the source code.

##############################################################################
# Common
##############################################################################
load("@rules_proto//proto:defs.bzl", "proto_library")
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "cc_grpc_library",
    "cc_proto_library",
    "csharp_gapic_assembly_pkg",
    "csharp_gapic_library",
    "csharp_grpc_library",
    "csharp_proto_library",
    "go_proto_library",
    "java_gapic_assembly_gradle_pkg",
    "java_gapic_library",
    "java_gapic_test",
    "java_grpc_library",
    "java_proto_library",
    "nodejs_gapic_assembly_pkg",
    "nodejs_gapic_library",
    "php_gapic_assembly_pkg",
    "php_gapic_library",
    "php_proto_library",
    "proto_library_with_info",
    "py_gapic_assembly_pkg",
    "py_gapic_library",
    "py_test",
    "ruby_cloud_gapic_library",
    "ruby_gapic_assembly_pkg",
    "ruby_grpc_library",
    "ruby_proto_library",
)

# This is an API workspace, having public visibility by default makes perfect sense.
package(default_visibility = ["//visibility:public"])

proto_library(
    name = "containeranalysis_proto",
    srcs = [
        "containeranalysis.proto",
    ],
    deps = [
        "//google/api:annotations_proto",
        "//google/api:client_proto",
        "//google/api:field_behavior_proto",
        "//google/api:resource_proto",
        "//google/iam/v1:iam_policy_proto",
        "//google/iam/v1:policy_proto",
        "//grafeas/v1:grafeas_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

proto_library_with_info(
    name = "containeranalysis_proto_with_info",
    deps = [
        ":containeranalysis_proto",
        "//google/cloud:common_resources_proto",
    ],
)

## DO NOT REMOVE
## Node.js library must be built based on both ContainerAnalysis v1 and
## Grafeas v1 protos.
proto_library_with_info(
    name = "containeranalysis_grafeas_proto_with_info",
    deps = [
        ":containeranalysis_proto",
        "//google/cloud:common_resources_proto",
        "//grafeas/v1:grafeas_proto",
    ],
)

java_proto_library(
    name = "containeranalysis_java_proto",
    deps = [":containeranalysis_proto"],
)

java_grpc_library(
    name = "containeranalysis_java_grpc",
    srcs = [":containeranalysis_proto"],
    deps = [":containeranalysis_java_proto"],
)

java_gapic_library(
    name = "containeranalysis_java_gapic",
    srcs = [":containeranalysis_proto_with_info"],
    gapic_yaml = "containeranalysis_gapic.yaml",
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    rest_numeric_enums = True,
    service_yaml = "containeranalysis_v1.yaml",
    test_deps = [
        ":containeranalysis_java_grpc",
        "//google/iam/v1:iam_java_grpc",
    ],
    transport = "grpc+rest",
    deps = [
        ":containeranalysis_java_proto",
        "//google/api:api_java_proto",
        "//google/iam/v1:iam_java_proto",
        "//grafeas/v1:common_java_proto",
    ],
)

java_gapic_test(
    name = "containeranalysis_java_gapic_test_suite",
    test_classes = [
        "com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisClientHttpJsonTest",
        "com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisClientTest",
    ],
    runtime_deps = [":containeranalysis_java_gapic_test"],
)

# Open Source Packages
java_gapic_assembly_gradle_pkg(
    name = "google-cloud-devtools-containeranalysis-v1-java",
    include_samples = True,
    transport = "grpc+rest",
    deps = [
        ":containeranalysis_java_gapic",
        ":containeranalysis_java_grpc",
        ":containeranalysis_java_proto",
        ":containeranalysis_proto",
    ],
)

go_proto_library(
    name = "containeranalysis_go_proto",
    compilers = ["@io_bazel_rules_go//proto:go_grpc"],
    importpath = "google.golang.org/genproto/googleapis/devtools/containeranalysis/v1",
    protos = [":containeranalysis_proto"],
    deps = [
        "//google/api:annotations_go_proto",
        "//google/iam/v1:iam_go_proto",
        "//grafeas/v1:grafeas_go_proto",
    ],
)

# go_gapic_library(
#     name = "containeranalysis_go_gapic",
#     srcs = [":containeranalysis_proto_with_info"],
#     grpc_service_config = "containeranalysis_grpc_service_config.json",
#     importpath = "cloud.google.com/go/devtools/containeranalysis/apiv1;containeranalysis",
#     metadata = True,
#     service_yaml = "containeranalysis_v1.yaml",
#     deps = [
#         ":containeranalysis_go_proto",
#         "//google/iam/v1:iam_go_proto",
#         "//grafeas/v1:common_go_proto",
#     ],
# )

# # Open Source Packages
# go_gapic_assembly_pkg(
#     name = "gapi-cloud-devtools-containeranalysis-v1-go",
#     deps = [
#         ":containeranalysis_go_gapic",
#         ":containeranalysis_go_gapic_srcjar-metadata.srcjar",
#         ":containeranalysis_go_gapic_srcjar-snippets.srcjar",
#         ":containeranalysis_go_gapic_srcjar-test.srcjar",
#         ":containeranalysis_go_proto",
#     ],
# )

py_gapic_library(
    name = "containeranalysis_py_gapic",
    srcs = [":containeranalysis_proto"],
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    opt_args = [
        "python-gapic-namespace=google.cloud.devtools",
        "warehouse-package-name=google-cloud-containeranalysis",
    ],
    rest_numeric_enums = True,
    service_yaml = "containeranalysis_v1.yaml",
    transport = "grpc+rest",
    deps = [
        "//google/iam/v1:iam_policy_py_proto",
        "//google/iam/v1:policy_py_proto",
        "//grafeas/v1:grafeas_py_proto",
    ],
)

py_test(
    name = "containeranalysis_py_gapic_test",
    srcs = [
        "containeranalysis_py_gapic_pytest.py",
        "containeranalysis_py_gapic_test.py",
    ],
    legacy_create_init = False,
    deps = [":containeranalysis_py_gapic"],
)

# Open Source Packages
py_gapic_assembly_pkg(
    name = "devtools-containeranalysis-v1-py",
    deps = [
        ":containeranalysis_py_gapic",
    ],
)

php_proto_library(
    name = "containeranalysis_php_proto",
    deps = [":containeranalysis_proto"],
)

php_gapic_library(
    name = "containeranalysis_php_gapic",
    srcs = [":containeranalysis_proto_with_info"],
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    migration_mode = "MIGRATING",
    rest_numeric_enums = True,
    service_yaml = "containeranalysis_v1.yaml",
    transport = "grpc+rest",
    deps = [":containeranalysis_php_proto"],
)

# Open Source Packages
php_gapic_assembly_pkg(
    name = "google-cloud-devtools-containeranalysis-v1-php",
    deps = [
        ":containeranalysis_php_gapic",
        ":containeranalysis_php_proto",
    ],
)

nodejs_gapic_library(
    name = "containeranalysis_nodejs_gapic",
    package_name = "@google-cloud/containeranalysis",
    ## DO NOT CHANGE: src must point to a combined proto target
    src = ":containeranalysis_grafeas_proto_with_info",
    extra_protoc_parameters = ["metadata"],
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    main_service = "containeranalysis",
    package = "google.devtools.containeranalysis.v1",
    rest_numeric_enums = True,
    service_yaml = "containeranalysis_v1.yaml",
    transport = "grpc+rest",
    deps = [],
)

nodejs_gapic_assembly_pkg(
    name = "devtools-containeranalysis-v1-nodejs",
    deps = [
        ":containeranalysis_nodejs_gapic",
        ":containeranalysis_proto",
        ## DO NOT CHANGE: must include Grafeas protos
        "//grafeas/v1:grafeas_proto",
    ],
)

ruby_proto_library(
    name = "containeranalysis_ruby_proto",
    deps = [":containeranalysis_proto"],
)

ruby_grpc_library(
    name = "containeranalysis_ruby_grpc",
    srcs = [":containeranalysis_proto"],
    deps = [":containeranalysis_ruby_proto"],
)

ruby_cloud_gapic_library(
    name = "containeranalysis_ruby_gapic",
    srcs = [":containeranalysis_proto_with_info"],
    extra_protoc_parameters = [
        "ruby-cloud-gem-name=google-cloud-container_analysis-v1",
        "ruby-cloud-env-prefix=CONTAINER_ANALYSIS",
        "ruby-cloud-product-url=https://cloud.google.com/container-registry/docs/container-analysis",
        "ruby-cloud-api-id=containeranalysis.googleapis.com",
        "ruby-cloud-api-shortname=containeranalysis",
        "ruby-cloud-extra-dependencies=grafeas-v1=>= 0.4|< 2.a",
    ],
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    rest_numeric_enums = True,
    ruby_cloud_description = "The Container Analysis API is an implementation of Grafeas. It stores, and enables querying and retrieval of, critical metadata about all of your software artifacts.",
    ruby_cloud_title = "Container Analysis V1",
    service_yaml = "containeranalysis_v1.yaml",
    deps = [
        ":containeranalysis_ruby_grpc",
        ":containeranalysis_ruby_proto",
    ],
)

# Open Source Packages
ruby_gapic_assembly_pkg(
    name = "google-cloud-devtools-containeranalysis-v1-ruby",
    deps = [
        ":containeranalysis_ruby_gapic",
        ":containeranalysis_ruby_grpc",
        ":containeranalysis_ruby_proto",
    ],
)

csharp_proto_library(
    name = "containeranalysis_csharp_proto",
    deps = [":containeranalysis_proto"],
)

csharp_grpc_library(
    name = "containeranalysis_csharp_grpc",
    srcs = [":containeranalysis_proto"],
    deps = [":containeranalysis_csharp_proto"],
)

csharp_gapic_library(
    name = "containeranalysis_csharp_gapic",
    srcs = [":containeranalysis_proto_with_info"],
    common_resources_config = "@gax_dotnet//:Google.Api.Gax/ResourceNames/CommonResourcesConfig.json",
    grpc_service_config = "containeranalysis_grpc_service_config.json",
    rest_numeric_enums = True,
    service_yaml = "containeranalysis_v1.yaml",
    transport = "grpc+rest",
    deps = [
        ":containeranalysis_csharp_grpc",
        ":containeranalysis_csharp_proto",
    ],
)

# Open Source Packages
csharp_gapic_assembly_pkg(
    name = "google-cloud-devtools-containeranalysis-v1-csharp",
    deps = [
        ":containeranalysis_csharp_gapic",
        ":containeranalysis_csharp_grpc",
        ":containeranalysis_csharp_proto",
    ],
)

cc_proto_library(
    name = "containeranalysis_cc_proto",
    deps = [":containeranalysis_proto"],
)

cc_grpc_library(
    name = "containeranalysis_cc_grpc",
    srcs = [":containeranalysis_proto"],
    grpc_only = True,
    deps = [":containeranalysis_cc_proto"],
)
