// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.ads.googleads.v10.errors;

import "google/api/annotations.proto";

option csharp_namespace = "Google.Ads.GoogleAds.V10.Errors";
option go_package = "google.golang.org/genproto/googleapis/ads/googleads/v10/errors;errors";
option java_multiple_files = true;
option java_outer_classname = "AssetGroupListingGroupFilterErrorProto";
option java_package = "com.google.ads.googleads.v10.errors";
option objc_class_prefix = "GAA";
option php_namespace = "Google\\Ads\\GoogleAds\\V10\\Errors";
option ruby_package = "Google::Ads::GoogleAds::V10::Errors";

// Proto file describing asset group asset errors.

// Container for enum describing possible asset group listing group filter
// errors.
message AssetGroupListingGroupFilterErrorEnum {
  // Enum describing possible asset group listing group filter errors.
  enum AssetGroupListingGroupFilterError {
    // Enum unspecified.
    UNSPECIFIED = 0;

    // The received error code is not known in this version.
    UNKNOWN = 1;

    // Listing group tree is too deep.
    TREE_TOO_DEEP = 2;

    // Listing Group UNIT node cannot have children.
    UNIT_CANNOT_HAVE_CHILDREN = 3;

    // Listing Group SUBDIVISION node must have everything else child.
    SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD = 4;

    // Dimension type of Listing Group must be the same as that of its siblings.
    DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS = 5;

    // The sibling Listing Groups target exactly the same dimension value.
    SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS = 6;

    // The dimension type is the same as one of the ancestor Listing Groups.
    SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS = 7;

    // Each Listing Group tree must have a single root.
    MULTIPLE_ROOTS = 8;

    // Invalid Listing Group dimension value.
    INVALID_DIMENSION_VALUE = 9;

    // Hierarchical dimension must refine a dimension of the same type.
    MUST_REFINE_HIERARCHICAL_PARENT_TYPE = 10;

    // Invalid Product Bidding Category.
    INVALID_PRODUCT_BIDDING_CATEGORY = 11;

    // Modifying case value is allowed only while updating the entire subtree at
    // the same time.
    CHANGING_CASE_VALUE_WITH_CHILDREN = 12;

    // Subdivision node has children which must be removed first.
    SUBDIVISION_HAS_CHILDREN = 13;

    // Dimension can't subdivide everything-else node in its own hierarchy.
    CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE = 14;
  }


}
