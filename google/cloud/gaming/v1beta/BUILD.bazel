# This file was automatically generated by BuildFileGenerator

# This is an API workspace, having public visibility by default makes perfect sense.
package(default_visibility = ["//visibility:public"])

##############################################################################
# Common
##############################################################################
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@com_google_googleapis_imports//:imports.bzl", "proto_library_with_info")

proto_library(
    name = "gaming_proto",
    srcs = [
        "common.proto",
        "game_server_clusters.proto",
        "game_server_clusters_service.proto",
        "game_server_configs.proto",
        "game_server_configs_service.proto",
        "game_server_deployments.proto",
        "game_server_deployments_service.proto",
        "realms.proto",
        "realms_service.proto",
    ],
    deps = [
        "//google/api:annotations_proto",
        "//google/api:client_proto",
        "//google/api:field_behavior_proto",
        "//google/api:resource_proto",
        "//google/longrunning:operations_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

proto_library_with_info(
    name = "gaming_proto_with_info",
    deps = [
        ":gaming_proto",
        "//google/cloud:common_resources_proto",
    ],
)

##############################################################################
# Java
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "java_gapic_assembly_gradle_pkg",
    "java_gapic_library",
    "java_gapic_test",
    "java_grpc_library",
    "java_proto_library",
)

java_proto_library(
    name = "gaming_java_proto",
    deps = [":gaming_proto"],
)

java_grpc_library(
    name = "gaming_java_grpc",
    srcs = [":gaming_proto"],
    deps = [":gaming_java_proto"],
)

java_gapic_library(
    name = "gaming_java_gapic",
    srcs = [":gaming_proto_with_info"],
    grpc_service_config = "gaming_grpc_service_config.json",
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    test_deps = [
        ":gaming_java_grpc",
    ],
    transport = "grpc+rest",
    deps = [
        ":gaming_java_proto",
        "//google/api:api_java_proto",
    ],
)

java_gapic_test(
    name = "gaming_java_gapic_test_suite",
    test_classes = [
        "com.google.cloud.gaming.v1beta.GameServerClustersServiceClientHttpJsonTest",
        "com.google.cloud.gaming.v1beta.GameServerClustersServiceClientTest",
        "com.google.cloud.gaming.v1beta.GameServerConfigsServiceClientHttpJsonTest",
        "com.google.cloud.gaming.v1beta.GameServerConfigsServiceClientTest",
        "com.google.cloud.gaming.v1beta.GameServerDeploymentsServiceClientHttpJsonTest",
        "com.google.cloud.gaming.v1beta.GameServerDeploymentsServiceClientTest",
        "com.google.cloud.gaming.v1beta.RealmsServiceClientHttpJsonTest",
        "com.google.cloud.gaming.v1beta.RealmsServiceClientTest",
    ],
    runtime_deps = [":gaming_java_gapic_test"],
)

# Open Source Packages
java_gapic_assembly_gradle_pkg(
    name = "google-cloud-gaming-v1beta-java",
    include_samples = True,
    transport = "grpc+rest",
    deps = [
        ":gaming_java_gapic",
        ":gaming_java_grpc",
        ":gaming_java_proto",
        ":gaming_proto",
    ],
)

##############################################################################
# Go
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "go_gapic_assembly_pkg",
    "go_gapic_library",
    "go_proto_library",
)

go_proto_library(
    name = "gaming_go_proto",
    compilers = ["@io_bazel_rules_go//proto:go_grpc"],
    importpath = "cloud.google.com/go/gaming/apiv1beta/gamingpb",
    protos = [":gaming_proto"],
    deps = [
        "//google/api:annotations_go_proto",
        "//google/longrunning:longrunning_go_proto",
    ],
)

go_gapic_library(
    name = "gaming_go_gapic",
    srcs = [":gaming_proto_with_info"],
    grpc_service_config = "gaming_grpc_service_config.json",
    importpath = "cloud.google.com/go/gaming/apiv1beta;gaming",
    metadata = True,
    release_level = "beta",
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
    deps = [
        ":gaming_go_proto",
        "//google/longrunning:longrunning_go_proto",
        "@com_google_cloud_go_longrunning//:go_default_library",
        "@com_google_cloud_go_longrunning//autogen:go_default_library",
        "@io_bazel_rules_go//proto/wkt:duration_go_proto",
    ],
)

# Open Source Packages
go_gapic_assembly_pkg(
    name = "gapi-cloud-gaming-v1beta-go",
    deps = [
        ":gaming_go_gapic",
        ":gaming_go_gapic_srcjar-snippets.srcjar",
        ":gaming_go_gapic_srcjar-test.srcjar",
        ":gaming_go_proto",
    ],
)

##############################################################################
# Python
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "py_gapic_assembly_pkg",
    "py_gapic_library",
    "py_test",
)

py_gapic_library(
    name = "gaming_py_gapic",
    srcs = [":gaming_proto"],
    grpc_service_config = "gaming_grpc_service_config.json",
    opt_args = [
        "warehouse-package-name=google-cloud-game-servers",
    ],
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
)

py_test(
    name = "gaming_py_gapic_test",
    srcs = [
        "gaming_py_gapic_pytest.py",
        "gaming_py_gapic_test.py",
    ],
    legacy_create_init = False,
    deps = [":gaming_py_gapic"],
)

# Open Source Packages
py_gapic_assembly_pkg(
    name = "gaming-v1beta-py",
    deps = [
        ":gaming_py_gapic",
    ],
)

##############################################################################
# PHP
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "php_gapic_assembly_pkg",
    "php_gapic_library",
    "php_proto_library",
)

php_proto_library(
    name = "gaming_php_proto",
    deps = [":gaming_proto"],
)

php_gapic_library(
    name = "gaming_php_gapic",
    srcs = [":gaming_proto_with_info"],
    grpc_service_config = "gaming_grpc_service_config.json",
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
    deps = [":gaming_php_proto"],
)

# Open Source Packages
php_gapic_assembly_pkg(
    name = "google-cloud-gaming-v1beta-php",
    deps = [
        ":gaming_php_gapic",
        ":gaming_php_proto",
    ],
)

##############################################################################
# Node.js
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "nodejs_gapic_assembly_pkg",
    "nodejs_gapic_library",
)

nodejs_gapic_library(
    name = "gaming_nodejs_gapic",
    package_name = "@google-cloud/game-servers",
    src = ":gaming_proto_with_info",
    extra_protoc_parameters = ["metadata"],
    grpc_service_config = "gaming_grpc_service_config.json",
    package = "google.cloud.gaming.v1beta",
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
    deps = [],
)

nodejs_gapic_assembly_pkg(
    name = "gaming-v1beta-nodejs",
    deps = [
        ":gaming_nodejs_gapic",
        ":gaming_proto",
    ],
)

##############################################################################
# Ruby
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "ruby_cloud_gapic_library",
    "ruby_gapic_assembly_pkg",
    "ruby_grpc_library",
    "ruby_proto_library",
)

ruby_proto_library(
    name = "gaming_ruby_proto",
    deps = [":gaming_proto"],
)

ruby_grpc_library(
    name = "gaming_ruby_grpc",
    srcs = [":gaming_proto"],
    deps = [":gaming_ruby_proto"],
)

ruby_cloud_gapic_library(
    name = "gaming_ruby_gapic",
    srcs = [":gaming_proto_with_info"],
    extra_protoc_parameters = ["ruby-cloud-gem-name=google-cloud-gaming-v1beta"],
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
    deps = [
        ":gaming_ruby_grpc",
        ":gaming_ruby_proto",
    ],
)

# Open Source Packages
ruby_gapic_assembly_pkg(
    name = "google-cloud-gaming-v1beta-ruby",
    deps = [
        ":gaming_ruby_gapic",
        ":gaming_ruby_grpc",
        ":gaming_ruby_proto",
    ],
)

##############################################################################
# C#
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "csharp_gapic_assembly_pkg",
    "csharp_gapic_library",
    "csharp_grpc_library",
    "csharp_proto_library",
)

csharp_proto_library(
    name = "gaming_csharp_proto",
    deps = [":gaming_proto"],
)

csharp_grpc_library(
    name = "gaming_csharp_grpc",
    srcs = [":gaming_proto"],
    deps = [":gaming_csharp_proto"],
)

csharp_gapic_library(
    name = "gaming_csharp_gapic",
    srcs = [":gaming_proto_with_info"],
    common_resources_config = "@gax_dotnet//:Google.Api.Gax/ResourceNames/CommonResourcesConfig.json",
    grpc_service_config = "gaming_grpc_service_config.json",
    rest_numeric_enums = True,
    service_yaml = "gameservices_v1beta.yaml",
    transport = "grpc+rest",
    deps = [
        ":gaming_csharp_grpc",
        ":gaming_csharp_proto",
    ],
)

# Open Source Packages
csharp_gapic_assembly_pkg(
    name = "google-cloud-gaming-v1beta-csharp",
    deps = [
        ":gaming_csharp_gapic",
        ":gaming_csharp_grpc",
        ":gaming_csharp_proto",
    ],
)

##############################################################################
# C++
##############################################################################
# Put your C++ rules here
