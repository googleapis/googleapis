// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.accesscontextintelligence.serviceperimeter.v1beta;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/launch_stage.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Google.Cloud.AccessContextIntelligence.ServicePerimeter.V1Beta";
option go_package = "cloud.google.com/go/accesscontextintelligence/serviceperimeter/apiv1beta/serviceperimeterpb;serviceperimeterpb";
option java_multiple_files = true;
option java_outer_classname = "IntelligenceProto";
option java_package = "com.google.cloud.accesscontextintelligence.serviceperimeter.v1beta";
option php_namespace = "Google\\Cloud\\AccessContextIntelligence\\ServicePerimeter\\V1beta";
option ruby_package = "Google::Cloud::AccessContextIntelligence::ServicePerimeter::V1beta";

// Service Perimeter Intelligence service helps troubleshoot access issues
// related with service perimeters
service ServicePerimeterIntelligence {
  option (google.api.default_host) = "accesscontextintelligence.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform";

  // Checks why an access is granted or not with service perimeters
  rpc SimulateServicePerimeter(SimulateServicePerimeterRequest)
      returns (SimulateServicePerimeterResponse) {
    option (google.api.http) = {
      post: "/v1beta/servicePerimeter:simulate"
      body: "*"
    };
  }
}

// Details about the evaluation state of an identity
//
// NextTAG: 5
enum IdentityEvalState {
  // Not used
  IDENTITY_EVAL_STATE_UNSPECIFIED = 0;

  // The request matches the identity
  IDENTITY_EVAL_STATE_MATCH = 1;

  // The request doesn't match the identity
  IDENTITY_EVAL_STATE_NOT_MATCH = 2;

  // The identity is not supported.
  IDENTITY_EVAL_STATE_NOT_SUPPORTED = 3;

  // The sender of the request is not allowed to verify the identity.
  IDENTITY_EVAL_STATE_INFO_DENIED = 4;
}

// Overall evaluation state of the directional policies. Reflects the aggregated
// evaluation state of all the ingress policies or all the egress policies in
// one service perimeter.
//
// NextTAG: 5
enum OverallDirectionalPoliciesEvalState {
  // Not used
  OVERALL_DIRECTIONAL_POLICIES_EVAL_STATE_UNSPECIFIED = 0;

  // The request is granted by the directional policies
  OVERALL_DIRECTIONAL_POLICIES_EVAL_STATE_GRANTED = 1;

  // The request is denied by the directional policies
  OVERALL_DIRECTIONAL_POLICIES_EVAL_STATE_DENIED = 2;

  // The directional policies are not applicable for the request
  OVERALL_DIRECTIONAL_POLICIES_EVAL_STATE_NOT_APPLICABLE = 3;

  // The directional policy check state is internal.
  OVERALL_DIRECTIONAL_POLICIES_EVAL_STATE_INTERNAL = 4;
}

// Details about the evaluation state.
//
// NextTAG: 5
enum EvalState {
  // Not used
  EVAL_STATE_UNSPECIFIED = 0;

  // The eval state is matched
  EVAL_STATE_GRANTED = 1;

  // The eval state is DENIED
  EVAL_STATE_DENIED = 2;

  // The eval state is unknown
  EVAL_STATE_UNKNOWN = 3;

  // The eval state is internal
  EVAL_STATE_INTERNAL = 4;
}

// The evaluation state of the api operation and role.
enum OperationEvalState {
  // Not used
  OPERATION_EVAL_STATE_UNSPECIFIED = 0;

  // The operation or role is matched.
  OPERATION_EVAL_STATE_MATCHED = 1;

  // The permissions are partially matched by the operation or role. Only
  // applied to permission and role related evaluation.
  OPERATION_EVAL_STATE_PARTIALLY_MATCHED = 2;

  // The operation or role is not matched.
  OPERATION_EVAL_STATE_NOT_MATCHED = 3;

  // The operation eval state is unknown and the reason is info denied.
  OPERATION_EVAL_STATE_UNKNOWN_INFO_DENIED = 4;

  // The operation eval state is unknown and the reason is unsupported.
  OPERATION_EVAL_STATE_UNKNOWN_UNSUPPORTED = 5;
}

// The support stage of the service.
enum ServiceSupportStage {
  // Do not use this default value.
  SERVICE_SUPPORT_STAGE_UNSPECIFIED = 0;

  // GA features are open to all developers and are considered stable and
  // fully qualified for production use.
  GA = 1;

  // PREVIEW indicates a pre-release stage where the product is functionally
  // complete but undergoing real-world testing.
  PREVIEW = 2;

  // Deprecated features are scheduled to be shut down and removed.
  DEPRECATED = 3;
}

// Request to troubleshoot service perimeters
message SimulateServicePerimeterRequest {
  // The acceptable kinds of the request. Currently only token is supported.
  oneof kind {
    // The token can be generated when customers get access denied by the
    // service perimeter
    string token = 1;
  }
}

// Response to troubleshoot service perimeters
//
// NextTAG: 16
message SimulateServicePerimeterResponse {
  // The access state of the request.
  //
  // NextTAG: 4
  enum AccessState {
    // Not used
    ACCESS_STATE_UNSPECIFIED = 0;

    // The request is not restricted by any service perimeters
    NOT_APPLICABLE = 1;

    // The request is granted by service perimeters
    GRANTED = 2;

    // The request is denied by service perimeters
    DENIED = 3;
  }

  // Violation principal's identity type that is enforced in the evaluation.
  //
  // NextTAG: 3
  enum EnforcedIdentityType {
    // The principal's identity type is not specified in the troubleshooting
    // token.
    ENFORCED_IDENTITY_TYPE_UNSPECIFIED = 0;

    // The principal is a user.
    USER = 1;

    // The principal is a service account.
    SERVICE_ACCOUNT = 2;
  }

  // The access state of the active service perimeters.
  AccessState access_state = 1;

  // The access state of the dry run service perimeters
  AccessState dryrun_access_state = 2;

  // The service name as specified in its service configuration. For example,
  // `"pubsub.googleapis.com"`.
  //
  // See
  // [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
  // for the definition of a service name.
  string service = 3;

  // Fully qualified name of the operation.
  string operation = 4;

  // Details about the resolved resources.
  repeated ResolvedResource resolved_resources = 5;

  // Explanation of access policies
  repeated AccessPolicyExplanation access_policy_explanations = 6;

  // The principal email address of the violation principal from troubleshoot
  // token.
  string principal = 7;

  // The request_time from troubleshooting token. It captures when the request
  // generating the token was made. The violation time when token is logged
  // because of the VPC SC violation.
  google.protobuf.Timestamp request_time = 8;

  // The ip address of the violation principal from troubleshoot token.
  string principal_ip = 9;

  // The region code of the principal ip address from troubleshoot token.
  string principal_ip_region = 10;

  // The principal's identity type that is enforced in the evaluation. This may
  // have the value as ENFORCED_IDENTITY_TYPE_UNSPECIFIED if the identity type
  // could not be fetched or unavailable at the time of VPC SC violation.
  EnforcedIdentityType enforced_identity_type = 14;

  // Device information of the device from troubleshoot token.
  DeviceInfo device_info = 11;

  // Supported service that indicates the current VPC-SC integration status.
  SupportedService supported_service = 15;
}

// The details of a resolved resource.
//
// NextTAG: 11
message ResolvedResource {
  // The resolved resource's state
  //
  // NextTAG: 5
  enum ResolvedState {
    // Not used
    RESOLVED_STATE_UNSPECIFIED = 0;

    // The caller doesn't have permission to resolve this resource
    INFO_DENIED = 1;

    // The resource has been fully resolved
    COMPLETED = 2;

    // The resource cannot be restricted by service perimeters
    NOT_APPLICABLE = 3;

    // The resource cannot be resolved due to an error.
    ERROR = 4;
  }

  // The type of the resource.
  //
  // NextTAG: 2
  enum ResourceType {
    // Not used
    RESOURCE_TYPE_UNSPECIFIED = 0;

    // Network resource type.
    NETWORK = 1;
  }

  // The resolved resource's state
  ResolvedState resolved_state = 1;

  // The project number of the project associated with this resolved resource.
  // In the format of "projects/{project_number}".
  string project_number = 2;

  // Project string identifier,  in the format of "projects/{project_id}".
  // e.g. "projects/my-project-123".
  string project_id = 3;

  // The iam permission names attached to this resource.
  // This only applies to resources generated from resource containers.
  repeated string permissions = 4;

  // The resource names belonging to this resource.
  // For network resource, this is its network full name or redacted name.
  repeated string resource_names = 5
      [(google.api.resource_reference) = { type: "*" }];

  // The resource type of the resource.
  ResourceType resource_type = 6;

  // Full resource name of the regular service perimeters that restricts the
  // resource
  //
  // Format:
  // `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
  repeated string regular_service_perimeters = 7;

  // Full resource names of the bridge service perimeters that restrict the
  // resource
  //
  // Format:
  // `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
  repeated string bridge_service_perimeters = 8;

  // Full resource name of the dry run regular service perimeters that restricts
  // the resource
  //
  // Format:
  // `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
  repeated string dryrun_regular_service_perimeters = 9;

  // Full resource names of the dryrun bridge service perimeters that restrict
  // the resource
  //
  // Format:
  // `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
  repeated string dryrun_bridge_service_perimeters = 10;
}

// Explanation of an access policy
//
// NextTAG: 7
message AccessPolicyExplanation {
  // Details about the enforcement state of the context in the access policy
  enum ContextEnforcementState {
    // Not used
    CONTEXT_ENFORCEMENT_STATE_UNSPECIFIED = 0;

    // Current context is not used for access level evaluation.
    NOT_ENFORCED = 1;

    // Current context is used for access level evaluation.
    // Device is valid and not stale.
    ENFORCED = 2;
  }

  // The full resource name of an access policy
  //
  // Format: `accessPolicies/{access_policy}`
  string access_policy = 1;

  // The explanations for the service perimeters in order
  repeated ServicePerimeterExplanation service_perimeter_explanations = 2;

  // The service perimeter definitions
  repeated ServicePerimeter service_perimeters = 6;

  // The device enforcement state of the access policy. It indicates whether the
  // device is used for access level evaluation.
  ContextEnforcementState device_enforcement_state = 5;
}

// Explanation of a service perimeter
//
// NextTAG: 4
message ServicePerimeterExplanation {
  // The full name of the service perimeter
  string service_perimeter = 1
      [(google.api.resource_reference) = { type: "*" }];

  // Explanation of a service perimeter config
  ServicePerimeterConfigExplanation service_perimeter_config_explanation = 2;

  // Explanation of a dryrun service perimeter config
  ServicePerimeterConfigExplanation
      dryrun_service_perimeter_config_explanation = 3;
}

// Explanation of the vpc accessible service policy
//
// NextTAG: 2
message VpcAccessibleServicesExplanation {
  // Details about the evaluation state of the vpc accessible service policy
  enum EvalState {
    // Not used
    EVAL_STATE_UNSPECIFIED = 0;

    // Vpc accessible service evaluation is not applicable
    NOT_APPLICABLE = 1;

    // Vpc accessible service policy grants the request
    GRANTED = 2;

    // Vpc accessible service policy denies the request
    DENIED = 3;

    // It is an internal traffic
    INTERNAL = 4;
  }

  // Details about the evaluation state of the vpc accessible service policy
  EvalState eval_state = 1;
}

// Explanation of an ingress to policy evaluated against the target resource.
//
// NextTAG: 7
message IngressToExplanation {
  // The 0-based index identifying the target resource within the collection of
  // resolved resources.This index refers to the specific resource that will be
  // evaluated against the ingress to policy.
  int32 target_resource_index = 1;

  // The evaluation state of the ingress to policy evaluated against the target
  // resource.
  EvalState ingress_to_eval_state = 2;

  // Details of the evaluation states of resources
  repeated EvalState resource_eval_states = 3;

  // The evaluation state of the api operation.
  EvalState operation_overall_eval_state = 4;

  // Details of the explanation of api operations
  repeated ApiOperationExplanation api_operation_explanations = 5;
}

// Explanation of ingress policies
//
// NextTAG: 8
message IngressPolicyExplanation {
  // The evaluation state of the ingress from policy evaluated against the
  // source resource. The evaluation result is calculated with the consideration
  // of the top_level_access_levels_overall_eval_state,
  // ingress_from_overall_identity_eval_state and
  // ingress_from_source_eval_state.
  EvalState ingress_from_eval_state = 1;

  // Overall evaluation state of all the top level access levels
  EvalState top_level_access_levels_overall_eval_state = 2;

  // The overall identity evaluation state of the ingress from policy.
  // It is the aggregation of ingress_from_identity_eval_states or the
  // ingress_from_identity_type_eval_state. It is the same for one given
  // ingress policy.
  EvalState ingress_from_overall_identity_eval_state = 3;

  // Identity type evaluation state of the ingress from policy. It indicates
  // whether the identity type is granted by the ingress from policy.
  EvalState ingress_from_identity_type_eval_state = 4;

  // The detailed evaluation explanation of the identity list in ingress
  // from policy.
  repeated IdentityEvalState ingress_from_identity_eval_states = 5;

  // The eval states of the ingress source.
  repeated EvalState ingress_from_source_eval_states = 6;

  // The detailed explanation of the ingress to, evaluated against target
  // resources.
  repeated IngressToExplanation ingress_to_explanations = 7;
}

// Explanation of an egress from policy, evaluated against the source resource.
//
// NextTAG: 4
message EgressFromExplanation {
  // The 0-based index identifying the source resource within the collection of
  // resolved resources. This index refers to the specific resource that will be
  // evaluated against the egress from policy.
  int32 source_resource_index = 1;

  // The state of the egress from policy evaluated against the source resource.
  // The evaluation result is calculated with the consideration
  // of overall_identity_eval_state and egress_from_source_eval_states.
  EvalState egress_from_eval_state = 2;

  // The evaluation state of the egress source.
  repeated EvalState egress_from_source_eval_states = 3;
}

// Explanation of an egress to policy, evaluated against the target resource.
//
// NextTAG: 8
message EgressToExplanation {
  // The 0-based index identifying the target resource within the collection of
  // resolved resources. This index refers to the specific resource that will be
  // evaluated against the egress to policy.
  int32 target_resource_index = 1;

  // The evaluation state of the egress to policy evaluated against the target
  // resource.
  EvalState egress_to_eval_state = 2;

  // Details of the eval states of resources
  repeated EvalState resource_eval_states = 3;

  // Details of the eval states of external resources
  repeated EvalState external_resource_eval_states = 4;

  // The evaluation state of the api operation.
  EvalState operation_overall_eval_state = 5;

  // Details of the explanation of api operations
  repeated ApiOperationExplanation api_operation_explanations = 6;
}

// Explanation of egress policies.
//
// NextTAG: 6
message EgressPolicyExplanation {
  // The overall identity evaluation state of the egress from policy.
  // It is the aggregation of identity_eval_states or the
  // identity_type_eval_state.
  EvalState overall_identity_eval_state = 1;

  // Identity type evaluation state of the egress from policy. It indicates
  // whether the identity type is granted by the egress from policy.
  EvalState identity_type_eval_state = 2;

  // The detailed evaluation explanation of the identity list in egress
  // from policy.
  repeated IdentityEvalState identity_eval_states = 3;

  // The detailed egress from evaluation states of the egress from policy,
  // evaluated against all source resources that require policy evaluations.
  repeated EgressFromExplanation egress_from_explanations = 4;

  // The detailed egress to evaluation states of the egress to policy, evaluated
  // against all target resources that require policy evaluations.
  repeated EgressToExplanation egress_to_explanations = 5;
}

// Explanation of service perimeter configuration
//
// NextTAG: 14
message ServicePerimeterConfigExplanation {
  // Details about the direction policies's evaluation state of resource.
  // For ingress policies, it contains the target resource index and its
  // aggregated policy evaluation state. For egress policies, it contains the
  // source and target resource indexes and its aggregated evaluation state.
  //
  // NextTAG: 4
  message ResourceDirectionalPoliciesEvaluation {
    // Details about the evaluation state of all the policies evaluated against
    // the given pair of resources.
    //
    // NextTAG: 8
    enum DirectionalPolicyEvalState {
      // Not used
      DIRECTIONAL_POLICY_EVAL_STATE_UNSPECIFIED = 0;

      // The pair of resources are in the same regular service perimeter
      GRANTED_BY_SAME_REGULAR_PERIMETER = 1;

      // The pair of resources are in the same bridge service perimeter
      GRANTED_BY_SAME_BRIDGE_PERIMETER = 2;

      // The pair of resources is granted by the directional policy
      GRANTED_BY_POLICY = 3;

      // The pair of resources is denied by the directional policy
      DENIED_BY_POLICY = 4;

      // The directional policy is not applicable for the request
      NOT_APPLICABLE = 5;

      // The pair of resources are in the same regular service perimeter and
      // bridge service perimeter
      GRANTED_BY_SAME_REGULAR_AND_BRIDGE_PERIMETER = 6;

      // The evaluation state of the resource pair is unknown.
      UNKNOWN = 7;
    }

    // The 0-based index of the source resource in the resource pair that is
    // evaluated against the policies. source_resource_index only applies to
    // egress policies. For ingress policies, this field will be -1 but does not
    // refer to any resource.
    int32 source_resource_index = 1;

    // The 0-based index of the target resource in the resource pair that is
    // evaluated against the policies.
    int32 target_resource_index = 2;

    // The evaluation state of the resource pair.
    DirectionalPolicyEvalState directional_policy_eval_state = 3;
  }

  // Details about the evaluation state of a service perimeter configuration
  //
  // NextTAG: 5
  enum ServicePerimeterConfigExplanationEvalState {
    // Not used
    SERVICE_PERIMETER_CONFIG_EXPLANATION_EVAL_STATE_UNSPECIFIED = 0;

    // The evaluation state of a service perimeter configuration is not
    // applicable
    NOT_APPLICABLE = 1;

    // The service perimeter config grants the request
    GRANTED = 2;

    // The service perimeter config denies the request
    DENIED = 3;

    // The service perimeter dry run configuration is inherited from the active
    // service perimeter. The dry run evaluation state is the same as the active
    // service perimeter evaluation state. This should only be set for dry run
    // service perimeter configuration.
    INHERITED_FROM_ACTIVE = 4;
  }

  // Details about the state of whether or not the request service is restricted
  //
  // NextTAG: 3
  enum RestrictedServiceState {
    // Not used
    RESTRICTED_SERVICE_STATE_UNSPECIFIED = 0;

    // The request service is restricted
    IS_RESTRICTED = 1;

    // The request service is not restricted
    IS_NOT_RESTRICTED = 2;
  }

  // The evaluation state of the service perimeter configuration
  ServicePerimeterConfigExplanationEvalState eval_state = 1;

  // Restricted state of the service in request.
  // It indicates whether the service from the request is restricted by the
  // service perimeter configuration.
  RestrictedServiceState restricted_service_state = 2;

  // The 0-based index identifying the restricted resources within the
  // collection of resolved resources. This index refers to the specific
  // resources that are restricted by the current service perimeter
  // configuration.
  repeated int32 restricted_resource_indexes = 3;

  // Overall aggregated evaluation state of all the ingress policies in this
  // service perimeter configuration.
  OverallDirectionalPoliciesEvalState overall_ingress_policies_eval_state = 4;

  // The ingress evaluation states for all ingress target resources.
  // Each ingress target resource is evaluated against all the ingress policies,
  // with the consideration of the top level access levels.
  repeated ResourceDirectionalPoliciesEvaluation
      ingress_resource_direction_policies_evaluations = 12;

  // Details about the evaluation state of each top level access level
  repeated EvalState top_level_access_level_eval_states = 6;

  // Explanation of ingress policies.
  // Each has the evaluation detail of each single ingress policy evaluated
  // against all the ingress target resources.
  repeated IngressPolicyExplanation ingress_policy_explanations = 7;

  // Overall aggregated evaluation state of all the egress policies in this
  // service perimeter configuration.
  OverallDirectionalPoliciesEvalState overall_egress_policies_eval_state = 8;

  // The egress evaluation states for each egress source and target resource
  // pair. Each egress resource pair is evaluated against all the egress
  // policies.
  repeated ResourceDirectionalPoliciesEvaluation
      egress_resource_direction_policies_evaluations = 13;

  // Explanation of egress policies.
  // Each has the evaluation details of each single egress policy evaluated
  // against all the egress source and target resources.
  repeated EgressPolicyExplanation egress_policy_explanations = 10;

  // Explanation of the vpc accessible service policy
  VpcAccessibleServicesExplanation vpc_accessible_services_explanation = 11;
}

// Detailed Device Information.
// NextTAG: 5
message DeviceInfo {
  // Device state to return to clients.
  //
  // NextTAG: 6
  enum DeviceState {
    // Reserved
    DEVICE_STATE_UNSPECIFIED = 0;

    // Client doesn't have permission to fetch device details
    INFO_NOT_AUTHORIZED = 1;

    // Unable to find the device.
    DEVICE_NOT_FOUND = 2;

    // Device state is valid
    NORMAL = 3;

    // Device expires
    STALE = 4;

    // Internal error to be used for cases where a specific device state doesn't
    // exist
    INTERNAL_ERROR = 5;
  }

  // DDS Device id. It is visible publicly in MDM
  string device_id = 1;

  // The device condition.
  DeviceState device_state = 2;

  // The last sync time of the device
  google.protobuf.Timestamp device_last_sync_time = 3;

  // Device details.
  DeviceContext device_context = 4;
}

// Detailed device context.
//
// NextTAG: 8
message DeviceContext {
  // The encryption state of the device.
  //
  // NextTAG: 4
  enum DeviceEncryptionState {
    // The encryption state of the device is not specified or not known.
    DEVICE_ENCRYPTION_STATE_UNSPECIFIED = 0;

    // The device does not support encryption.
    UNSUPPORTED = 1;

    // The device supports encryption, but is currently unencrypted.
    UNENCRYPTED = 2;

    // The device is encrypted.
    ENCRYPTED = 3;
  }

  // The operating system type of the device.
  //
  // NextTAG: 7
  enum OsType {
    // The operating system of the device is not specified or not known.
    OS_TYPE_UNSPECIFIED = 0;

    // A desktop Mac operating system.
    DESKTOP_MAC = 1;

    // A desktop Windows operating system.
    DESKTOP_WINDOWS = 2;

    // A desktop Linux operating system.
    DESKTOP_LINUX = 3;

    // An Android operating system.
    ANDROID = 4;

    // An iOS operating system.
    IOS = 5;

    // A desktop ChromeOS operating system.
    DESKTOP_CHROME_OS = 6;
  }

  // If the device has enabled screen lock.
  bool is_screenlock_enabled = 1;

  // Output only. Status of disk encryption on device.
  DeviceEncryptionState encryption_state = 2
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // The Operating System type of the device.
  OsType os_type = 3;

  // Ex: "3.0"
  string os_version = 4;

  // Whether the request comes from a device with a verified Chrome OS.
  bool verified_chrome_os = 5;

  // Whether the device has been approved by the domain admin.
  bool is_admin_approved_device = 6;

  // Whether the device is company (corp) owned.
  bool is_corp_owned_device = 7;
}

// Explanation of the api operation.
message ApiOperationExplanation {
  // The evaluation state of one api operation policy.
  OperationEvalState api_operation_eval_state = 1;

  // Whether the api operation is matched with request operation.
  bool is_method_matched = 2;

  // The permissions that are matched with required permissions.
  repeated string matched_permissions = 3;
}

// [Service
// Perimeter][google.identity.accesscontextmanager.v1.ServicePerimeter].
//
// NextTAG: 12
message ServicePerimeter {
  // Specifies the type of the Perimeter. There are two types: regular and
  // bridge. Regular Service Perimeter contains resources, access levels, and
  // restricted services. Every resource can be in at most ONE
  // regular Service Perimeter.
  enum PerimeterType {
    // No perimeter type specified.
    PERIMETER_TYPE_UNSPECIFIED = 0;

    // Perimeter Bridge.
    PERIMETER_TYPE_BRIDGE = 1;

    // Regular Perimeter. When no value is specified, the perimeter uses this
    // type.
    PERIMETER_TYPE_REGULAR = 2;
  }

  // Resource name for the `ServicePerimeter`. Format:
  // `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`.
  string service_perimeter = 1;

  // Human readable title. Must be unique within the Policy.
  string title = 2;

  // Description of the `ServicePerimeter` and its use. Does not affect
  // behavior.
  string description = 3;

  // Perimeter type indicator. A single project or VPC network is
  // allowed to be a member of single regular perimeter, but multiple service
  // perimeter bridges. A project cannot be a included in a perimeter bridge
  // without being included in regular perimeter. For perimeter bridges,
  // the restricted service list as well as access level lists must be
  // empty.
  PerimeterType perimeter_type = 6;

  // Current ServicePerimeter configuration. Specifies sets of resources,
  // restricted services and access levels that determine perimeter
  // content and boundaries.
  ServicePerimeterConfig status = 7;

  // Proposed (or dry run) ServicePerimeter configuration. This configuration
  // allows to specify and test ServicePerimeter configuration without enforcing
  // actual access restrictions. Only allowed to be set when the
  // "use_explicit_dry_run_spec" flag is set.
  ServicePerimeterConfig spec = 8;

  // Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
  // exists  for all Service Perimeters, and that spec is identical to the
  // status for those Service Perimeters. When this flag is set, it inhibits the
  // generation of the implicit spec, thereby allowing the user to explicitly
  // provide a configuration ("spec") to use in a dry-run version of the Service
  // Perimeter. This allows the user to test changes to the enforced config
  // ("status") without actually enforcing them. This testing is done through
  // analyzing the differences between currently enforced and suggested
  // restrictions. use_explicit_dry_run_spec must bet set to True if any of the
  // fields in the spec are set to non-default values.
  bool use_explicit_dry_run_spec = 9;

  // Optional. An opaque identifier for the current version of the
  // `ServicePerimeter`. This identifier does not follow any specific format.
  // If an etag is not provided, the operation will be performed as if a valid
  // etag is provided.
  string etag = 11;
}

// `ServicePerimeterConfig` specifies a set of Google Cloud resources that
// describe specific Service Perimeter configuration.
message ServicePerimeterConfig {
  // Specifies how APIs are allowed to communicate within the Service
  // Perimeter.
  message VpcAccessibleServices {
    // Whether to restrict API calls within the Service Perimeter to the list of
    // APIs specified in 'allowed_services'.
    bool enable_restriction = 1;

    // The list of APIs usable within the Service Perimeter. Must be empty
    // unless 'enable_restriction' is True. You can specify a list of individual
    // services, as well as include the 'RESTRICTED-SERVICES' value, which
    // automatically includes all of the services protected by the perimeter.
    repeated string allowed_services = 2;
  }

  // An allowed method or permission of a service specified in [ApiOperation]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation].
  message MethodSelector {
    // The API method name or Cloud IAM permission name to allow.
    oneof kind {
      // A valid method name for the corresponding `service_name` in
      // [ApiOperation]
      // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation].
      // If `*` is used as the value for the `method`, then ALL methods and
      // permissions are allowed.
      string method = 1;

      // A valid Cloud IAM permission for the corresponding `service_name` in
      // [ApiOperation]
      // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation].
      string permission = 2;
    }
  }

  // Identification for an API Operation.
  message ApiOperation {
    // The name of the API whose methods or permissions the [IngressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
    // or [EgressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
    // want to allow. A single [ApiOperation]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
    // with `service_name` field set to `*` will allow all methods AND
    // permissions for all services.
    string service_name = 1;

    // API methods or permissions to allow. Method or permission must belong to
    // the service specified by `service_name` field. A single [MethodSelector]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.MethodSelector]
    // entry with `*` specified for the `method` field will allow all methods
    // AND permissions for the service specified in `service_name`.
    repeated MethodSelector method_selectors = 2;
  }

  // The source that [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // authorizes access from.
  message IngressSource {
    // Allowed ingress source. It can be one of [AccessLevel]
    // [google.identity.accesscontextmanager.v1.AccessLevel] or Google
    // Cloud resource.
    oneof source {
      // An [AccessLevel]
      // [google.identity.accesscontextmanager.v1.AccessLevel] resource
      // name that allow resources within the [ServicePerimeters]
      // [google.identity.accesscontextmanager.v1.ServicePerimeter] to be
      // accessed from the internet. [AccessLevels]
      // [google.identity.accesscontextmanager.v1.AccessLevel] listed must
      // be in the same policy as this [ServicePerimeter]
      // [google.identity.accesscontextmanager.v1.ServicePerimeter].
      // Referencing a nonexistent [AccessLevel]
      // [google.identity.accesscontextmanager.v1.AccessLevel] will cause
      // an error. If no [AccessLevel]
      // [google.identity.accesscontextmanager.v1.AccessLevel] names are
      // listed, resources within the perimeter can only be accessed via Google
      // Cloud calls with request origins within the perimeter. Example:
      // `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*` is
      // specified for `access_level`, then all [IngressSources]
      // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressSource]
      // will be allowed.
      string access_level = 1;

      // A Google Cloud resource that is allowed to ingress the perimeter.
      // Requests from these resources will be allowed to access perimeter data.
      // Currently only projects and VPCs are allowed.
      // Project format: `projects/{project_number}`
      // VPC network format:
      // `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
      // The project may be in any Google Cloud organization, not just the
      // organization that the perimeter is defined in. `*` is not allowed, the
      // case of allowing all Google Cloud resources only is not supported.
      string resource = 2;
    }
  }

  // Defines the conditions under which an [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // matches a request. Conditions are based on information about the source of
  // the request. The request must satisfy what is defined in `sources` AND
  // identity related fields in order to match.
  message IngressFrom {
    // Sources that this [IngressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
    // authorizes access from.
    repeated IngressSource sources = 1;

    // A list of identities that are allowed access through [IngressPolicy].
    // Identities can be an individual user, service account, Google group, or
    // third-party identity. For third-party identity, only single identities
    // are supported and other identity types are not supported. The `v1`
    // identities that have the prefix `user`, `group`, `serviceAccount`, and
    // `principal` in https://cloud.google.com/iam/docs/principal-identifiers#v1
    // are supported.
    repeated string identities = 2;

    // Specifies the type of identities that are allowed access from outside the
    // perimeter. If left unspecified, then members of `identities` field will
    // be allowed access.
    IdentityType identity_type = 3;
  }

  // Defines the conditions under which an [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // matches a request. Conditions are based on information about the
  // [ApiOperation]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
  // intended to be performed on the target resource of the request. The request
  // must satisfy what is defined in `operations` AND `resources` in order to
  // match.
  message IngressTo {
    // A list of [ApiOperations]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
    // allowed to be performed by the sources specified in corresponding
    // [IngressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressFrom]
    // in this [ServicePerimeter]
    // [google.identity.accesscontextmanager.v1.ServicePerimeter].
    repeated ApiOperation operations = 1;

    // A list of resources, currently only projects in the form
    // `projects/<projectnumber>`, protected by this [ServicePerimeter]
    // [google.identity.accesscontextmanager.v1.ServicePerimeter] that are
    // allowed to be accessed by sources defined in the corresponding
    // [IngressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressFrom].
    // If a single `*` is specified, then access to all resources inside the
    // perimeter are allowed.
    repeated string resources = 2;

    // IAM roles that represent the set of operations that the sources
    // specified in the corresponding [IngressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressFrom]
    // are allowed to perform in this [ServicePerimeter]
    // [google.identity.accesscontextmanager.v1.ServicePerimeter].
    repeated string roles = 3;
  }

  // Policy for ingress into [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter].
  //
  // [IngressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // match requests based on `ingress_from` and `ingress_to` stanzas.  For an
  // ingress policy to match, both the `ingress_from` and `ingress_to` stanzas
  // must be matched. If an [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // matches a request, the request is allowed through the perimeter boundary
  // from outside the perimeter.
  //
  // For example, access from the internet can be allowed either
  // based on an [AccessLevel]
  // [google.identity.accesscontextmanager.v1.AccessLevel] or, for traffic
  // hosted on Google Cloud, the project of the source network. For access from
  // private networks, using the project of the hosting network is required.
  //
  // Individual ingress policies can be limited by restricting which
  // services and/or actions they match using the `ingress_to` field.
  message IngressPolicy {
    // Defines the conditions on the source of a request causing this
    // [IngressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
    // to apply.
    IngressFrom ingress_from = 1;

    // Defines the conditions on the [ApiOperation]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
    // and request destination that cause this [IngressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
    // to apply.
    IngressTo ingress_to = 2;

    // Optional. Human-readable title for the ingress rule. The title must be
    // unique within the perimeter and can not exceed 100 characters. Within the
    // access policy, the combined length of all rule titles must not exceed
    // 240,000 characters.
    string title = 3;
  }

  // The source that [EgressPolicy]
  // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressPolicy]
  // authorizes access from inside the [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1alpha.ServicePerimeter] to
  // somewhere outside the [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1alpha.ServicePerimeter] boundaries.
  message EgressSource {
    // Allowed egress source.
    oneof source {
      // An [AccessLevel]
      // [google.identity.accesscontextmanager.v1alpha.AccessLevel] resource
      // name that allows protected resources inside the [ServicePerimeters]
      // [google.identity.accesscontextmanager.v1alpha.ServicePerimeter] to
      // access outside the [ServicePerimeter]
      // [google.identity.accesscontextmanager.v1alpha.ServicePerimeter]
      // boundaries. [AccessLevels]
      // [google.identity.accesscontextmanager.v1alpha.AccessLevel] listed must
      // be in the same policy as this [ServicePerimeter]
      // [google.identity.accesscontextmanager.v1alpha.ServicePerimeter].
      // Referencing a nonexistent [AccessLevel]
      // [google.identity.accesscontextmanager.v1alpha.AccessLevel] will cause
      // an error. If an [AccessLevel]
      // [google.identity.accesscontextmanager.v1alpha.AccessLevel] name is not
      // specified, only resources within the perimeter can be accessed through
      // Google Cloud calls with request origins within the perimeter. Example:
      // `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*` is
      // specified for `access_level`, then all [EgressSources]
      // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressSource]
      // will be allowed.
      string access_level = 1;

      // A Google Cloud resource from the service perimeter that you want to
      // allow to access data outside the perimeter.
      // This field supports only projects. The project format is
      // `projects/{project_number}`. You can't use `*` in this field to allow
      // all Google Cloud resources.
      string resource = 2;
    }
  }

  // Defines the conditions under which an [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // matches a request. Conditions based on information about the source of the
  // request. Note that if the destination of the request is also protected by a
  // [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter], then that
  // [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter] must have
  // an [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // which allows access in order for this request to succeed.
  message EgressFrom {
    // A list of identities that are allowed access through [EgressPolicy].
    // Identities can be an individual user, service account, Google
    // group, or third-party identity. For third-party identity, only single
    // identities are supported and other identity types are not supported. The
    // `v1` identities that have the prefix `user`, `group`, `serviceAccount`,
    // and `principal` in
    // https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
    repeated string identities = 1;

    // Specifies the type of identities that are allowed access to outside the
    // perimeter. If left unspecified, then members of `identities` field will
    // be allowed access.
    IdentityType identity_type = 2;

    // Sources that this [EgressPolicy]
    // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressPolicy]
    // authorizes access from. If this field is not empty, then
    // `source_restriction` must be set to `SOURCE_RESTRICTION_ENABLED`.
    repeated EgressSource sources = 4;

    // Whether to enforce traffic restrictions based on `sources` field. If
    // the `sources` fields is non-empty, then this field must be set to
    // `SOURCE_RESTRICTION_ENABLED`.
    SourceRestriction source_restriction = 5;
  }

  // Defines the conditions under which an [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // matches a request. Conditions are based on information about the
  // [ApiOperation]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
  // intended to be performed on the `resources` specified. Note that if the
  // destination of the request is also protected by a [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter], then that
  // [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter] must have
  // an [IngressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // which allows access in order for this request to succeed. The request must
  // match `operations` AND `resources` fields in order to be allowed egress out
  // of the perimeter.
  message EgressTo {
    // A list of resources, currently only projects in the form
    // `projects/<projectnumber>`, that are allowed to be accessed by sources
    // defined in the corresponding [EgressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressFrom].
    // A request matches if it contains a resource in this list.  If `*` is
    // specified for `resources`, then this [EgressTo]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressTo]
    // rule will authorize access to all resources outside the perimeter.
    repeated string resources = 1;

    // A list of [ApiOperations]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
    // allowed to be performed by the sources specified in the corresponding
    // [EgressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressFrom].
    // A request matches if it uses an operation/service in this list.
    repeated ApiOperation operations = 2;

    // A list of external resources that are allowed to be accessed. Only AWS
    // and Azure resources are supported. For Amazon S3, the supported formats
    // are s3://BUCKET_NAME, s3a://BUCKET_NAME, and s3n://BUCKET_NAME. For Azure
    // Storage, the supported format is
    // azure://myaccount.blob.core.windows.net/CONTAINER_NAME. A request matches
    // if it contains an external resource in this list (Example:
    // s3://bucket/path). Currently '*' is not allowed.
    repeated string external_resources = 3;

    // IAM roles that represent the set of operations that
    // the sources specified in the corresponding [EgressFrom]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressFrom].
    // are allowed to perform in this [ServicePerimeter]
    // [google.identity.accesscontextmanager.v1.ServicePerimeter].
    repeated string roles = 4;
  }

  // Policy for egress from perimeter.
  //
  // [EgressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // match requests based on `egress_from` and `egress_to` stanzas.  For an
  // [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // to match, both `egress_from` and `egress_to` stanzas must be matched. If an
  // [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // matches a request, the request is allowed to span the [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter] boundary.
  // For example, an [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // can be used to allow VMs on networks within the [ServicePerimeter]
  // [google.identity.accesscontextmanager.v1.ServicePerimeter] to access a
  // defined set of projects outside the perimeter in certain contexts (e.g. to
  // read data from a Cloud Storage bucket or query against a BigQuery dataset).
  //
  // [EgressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // are concerned with the *resources* that a request relates as well as the
  // API services and API actions being used.  They do not related to the
  // direction of data movement.  More detailed documentation for this concept
  // can be found in the descriptions of [EgressFrom]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressFrom]
  // and [EgressTo]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressTo].
  message EgressPolicy {
    // Defines conditions on the source of a request causing this [EgressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
    // to apply.
    EgressFrom egress_from = 1;

    // Defines the conditions on the [ApiOperation]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.ApiOperation]
    // and destination resources that cause this [EgressPolicy]
    // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
    // to apply.
    EgressTo egress_to = 2;

    // Optional. Human-readable title for the egress rule. The title must be
    // unique within the perimeter and can not exceed 100 characters. Within the
    // access policy, the combined length of all rule titles must not exceed
    // 240,000 characters.
    string title = 3;
  }

  // Specifies the types of identities that are allowed access in either
  // [IngressFrom]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressFrom]
  // or [EgressFrom]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressFrom]
  // rules.
  enum IdentityType {
    // No blanket identity group specified.
    IDENTITY_TYPE_UNSPECIFIED = 0;

    // Authorize access from all identities outside the perimeter.
    ANY_IDENTITY = 1;

    // Authorize access from all human users outside the perimeter.
    ANY_USER_ACCOUNT = 2;

    // Authorize access from all service accounts outside the perimeter.
    ANY_SERVICE_ACCOUNT = 3;
  }

  // Whether to enable the enforcement of traffic based on on the `sources`
  // field. Only applies to [EgressFrom]
  // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressFrom].
  enum SourceRestriction {
    // Enforcement preference unspecified, will not enforce traffic restrictions
    // based on `sources` in [EgressFrom]
    // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressFrom].
    SOURCE_RESTRICTION_UNSPECIFIED = 0;

    // Enforcement preference enabled, traffic restrictions will be enforced
    // based on `sources` in [EgressFrom]
    // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressFrom].
    SOURCE_RESTRICTION_ENABLED = 1;

    // Enforcement preference disabled, will not enforce traffic restrictions
    // based on `sources` in [EgressFrom]
    // [google.identity.accesscontextmanager.v1alpha.ServicePerimeterConfig.EgressFrom].
    SOURCE_RESTRICTION_DISABLED = 2;
  }

  // A list of Google Cloud resources that are inside of the service perimeter.
  // Currently only projects and VPCs are allowed.
  // Project format: `projects/{project_number}`
  // VPC network format:
  // `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
  repeated string resources = 1;

  // A list of `AccessLevel` resource names that allow resources within the
  // `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed
  // must be in the same policy as this `ServicePerimeter`. Referencing a
  // nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are
  // listed, resources within the perimeter can only be accessed via Google
  // Cloud calls with request origins within the perimeter. Example:
  // `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`.
  // For Service Perimeter Bridge, must be empty.
  repeated string access_levels = 2;

  // Google Cloud services that are subject to the Service Perimeter
  // restrictions. For example, if `storage.googleapis.com` is specified, access
  // to the storage buckets inside the perimeter must meet the perimeter's
  // access restrictions.
  repeated string restricted_services = 4;

  // Configuration for APIs allowed within Perimeter.
  VpcAccessibleServices vpc_accessible_services = 10;

  // List of [IngressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // to apply to the perimeter. A perimeter may have multiple [IngressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy],
  // each of which is evaluated separately. Access is granted if any [Ingress
  // Policy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.IngressPolicy]
  // grants it. Must be empty for a perimeter bridge.
  repeated IngressPolicy ingress_policies = 8;

  // List of [EgressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // to apply to the perimeter. A perimeter may have multiple [EgressPolicies]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy],
  // each of which is evaluated separately. Access is granted if any
  // [EgressPolicy]
  // [google.identity.accesscontextmanager.v1.ServicePerimeterConfig.EgressPolicy]
  // grants it. Must be empty for a perimeter bridge.
  repeated EgressPolicy egress_policies = 9;
}

// `SupportedService` specifies the VPC Service Controls and
// its properties.
message SupportedService {
  // The service name or address of the supported service, such as
  // `service.googleapis.com`.
  string name = 1;

  // The support stage of the service.
  google.api.LaunchStage support_stage = 2;

  // True if the service is available on the restricted VIP.  Services on the
  // restricted VIP typically either support VPC Service Controls or are
  // core infrastructure services required for the functioning of Google Cloud.
  bool available_on_restricted_vip = 3;

  // The name of the supported product, such as 'Cloud Product API'.
  string title = 4;

  // The list of the supported methods.
  // This field exists only in response to
  // [GetSupportedService][google.identity.accesscontextmanager.v1.AccessContextManager.GetSupportedService]
  repeated ServicePerimeterConfig.MethodSelector supported_methods = 5;

  // True if the service is supported with some limitations. Check
  // [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products)
  // for details.
  bool known_limitations = 6;

  // The support stage of the service.
  ServiceSupportStage service_support_stage = 7;
}
