// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as adaptationModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.AdaptationClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new adaptationModule.v1.AdaptationClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'speech.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new adaptationModule.v1.AdaptationClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = adaptationModule.v1.AdaptationClient.servicePath;
                assert.strictEqual(servicePath, 'speech.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = adaptationModule.v1.AdaptationClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'speech.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new adaptationModule.v1.AdaptationClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'speech.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new adaptationModule.v1.AdaptationClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'speech.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new adaptationModule.v1.AdaptationClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'speech.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new adaptationModule.v1.AdaptationClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'speech.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new adaptationModule.v1.AdaptationClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = adaptationModule.v1.AdaptationClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new adaptationModule.v1.AdaptationClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new adaptationModule.v1.AdaptationClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.adaptationStub, undefined);
            await client.initialize();
            assert(client.adaptationStub);
        });

        it('has close method for the initialized client', done => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.adaptationStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.adaptationStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('createPhraseSet', () => {
        it('invokes createPhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.createPhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.createPhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.createPhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.IPhraseSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createPhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createPhraseSet(request), expectedError);
        });
    });

    describe('getPhraseSet', () => {
        it('invokes getPhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.getPhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.getPhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.getPhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.IPhraseSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getPhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getPhraseSet(request), expectedError);
        });
    });

    describe('updatePhraseSet', () => {
        it('invokes updatePhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.updatePhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.updatePhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.PhraseSet()
            );
            client.innerApiCalls.updatePhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updatePhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.IPhraseSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updatePhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updatePhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updatePhraseSet(request), expectedError);
        });
    });

    describe('deletePhraseSet', () => {
        it('invokes deletePhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deletePhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deletePhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deletePhraseSet(request), expectedError);
        });
    });

    describe('createCustomClass', () => {
        it('invokes createCustomClass without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.createCustomClass = stubSimpleCall(expectedResponse);
            const [response] = await client.createCustomClass(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.createCustomClass = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCustomClass(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.ICustomClass|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCustomClass = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createCustomClass(request), expectedError);
        });
    });

    describe('getCustomClass', () => {
        it('invokes getCustomClass without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.getCustomClass = stubSimpleCall(expectedResponse);
            const [response] = await client.getCustomClass(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.getCustomClass = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCustomClass(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.ICustomClass|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCustomClass = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getCustomClass(request), expectedError);
        });
    });

    describe('updateCustomClass', () => {
        it('invokes updateCustomClass without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.updateCustomClass = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCustomClass(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v1.CustomClass()
            );
            client.innerApiCalls.updateCustomClass = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCustomClass(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.ICustomClass|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCustomClass = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateCustomClass(request), expectedError);
        });
    });

    describe('deleteCustomClass', () => {
        it('invokes deleteCustomClass without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteCustomClass = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteCustomClass(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteCustomClass = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCustomClass(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCustomClass = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass with closed client', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteCustomClass(request), expectedError);
        });
    });

    describe('listPhraseSet', () => {
        it('invokes listPhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
            ];
            client.innerApiCalls.listPhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.listPhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSet without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
            ];
            client.innerApiCalls.listPhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.IPhraseSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listPhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSetStream without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
            ];
            client.descriptors.page.listPhraseSet.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPhraseSetStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v1.PhraseSet[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v1.PhraseSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPhraseSet.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseSet, request));
            assert(
                (client.descriptors.page.listPhraseSet.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listPhraseSetStream with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPhraseSet.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPhraseSetStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v1.PhraseSet[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v1.PhraseSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPhraseSet.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseSet, request));
            assert(
                (client.descriptors.page.listPhraseSet.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listPhraseSet without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v1.PhraseSet()),
            ];
            client.descriptors.page.listPhraseSet.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.speech.v1.IPhraseSet[] = [];
            const iterable = client.listPhraseSetAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseSet.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPhraseSet.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listPhraseSet with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListPhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPhraseSet.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPhraseSetAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.speech.v1.IPhraseSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseSet.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPhraseSet.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listCustomClasses', () => {
        it('invokes listCustomClasses without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
            ];
            client.innerApiCalls.listCustomClasses = stubSimpleCall(expectedResponse);
            const [response] = await client.listCustomClasses(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClasses without error using callback', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
            ];
            client.innerApiCalls.listCustomClasses = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCustomClasses(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v1.ICustomClass[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClasses with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCustomClasses = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCustomClasses(request), expectedError);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClassesStream without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
            ];
            client.descriptors.page.listCustomClasses.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCustomClassesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v1.CustomClass[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v1.CustomClass) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCustomClasses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomClasses, request));
            assert(
                (client.descriptors.page.listCustomClasses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listCustomClassesStream with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCustomClasses.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCustomClassesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v1.CustomClass[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v1.CustomClass) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCustomClasses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomClasses, request));
            assert(
                (client.descriptors.page.listCustomClasses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listCustomClasses without error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v1.CustomClass()),
            ];
            client.descriptors.page.listCustomClasses.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.speech.v1.ICustomClass[] = [];
            const iterable = client.listCustomClassesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listCustomClasses with error', async () => {
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v1.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v1.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCustomClasses.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCustomClassesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.speech.v1.ICustomClass[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('customClass', async () => {
            const fakePath = "/rendered/path/customClass";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                custom_class: "customClassValue",
            };
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customClassPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customClassPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customClassPath', () => {
                const result = client.customClassPath("projectValue", "locationValue", "customClassValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customClassPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCustomClassName', () => {
                const result = client.matchProjectFromCustomClassName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCustomClassName', () => {
                const result = client.matchLocationFromCustomClassName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomClassFromCustomClassName', () => {
                const result = client.matchCustomClassFromCustomClassName(fakePath);
                assert.strictEqual(result, "customClassValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('phraseSet', async () => {
            const fakePath = "/rendered/path/phraseSet";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                phrase_set: "phraseSetValue",
            };
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.phraseSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.phraseSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('phraseSetPath', () => {
                const result = client.phraseSetPath("projectValue", "locationValue", "phraseSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.phraseSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromPhraseSetName', () => {
                const result = client.matchProjectFromPhraseSetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromPhraseSetName', () => {
                const result = client.matchLocationFromPhraseSetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPhraseSetFromPhraseSetName', () => {
                const result = client.matchPhraseSetFromPhraseSetName(fakePath);
                assert.strictEqual(result, "phraseSetValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new adaptationModule.v1.AdaptationClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
