// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(recognizer) {
  // [START speech_v2_generated_Speech_Recognize_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the Recognizer to use during recognition. The
   *  expected format is
   *  `projects/{project}/locations/{location}/recognizers/{recognizer}`. The
   *  {recognizer} segment may be set to `_` to use an empty implicit Recognizer.
   */
  // const recognizer = 'abc123'
  /**
   *  Features and audio metadata to use for the Automatic Speech Recognition.
   *  This field in combination with the
   *  config_mask google.cloud.speech.v2.RecognizeRequest.config_mask  field
   *  can be used to override parts of the
   *  default_recognition_config google.cloud.speech.v2.Recognizer.default_recognition_config 
   *  of the Recognizer resource.
   */
  // const config = {}
  /**
   *  The list of fields in
   *  config google.cloud.speech.v2.RecognizeRequest.config  that override the
   *  values in the
   *  default_recognition_config google.cloud.speech.v2.Recognizer.default_recognition_config 
   *  of the recognizer during this recognition request. If no mask is provided,
   *  all non-default valued fields in
   *  config google.cloud.speech.v2.RecognizeRequest.config  override the
   *  values in the recognizer for this recognition request. If a mask is
   *  provided, only the fields listed in the mask override the config in the
   *  recognizer for this recognition request. If a wildcard (`*`) is provided,
   *  config google.cloud.speech.v2.RecognizeRequest.config  completely
   *  overrides and replaces the config in the recognizer for this recognition
   *  request.
   */
  // const configMask = {}
  /**
   *  The audio data bytes encoded as specified in
   *  RecognitionConfig google.cloud.speech.v2.RecognitionConfig. As
   *  with all bytes fields, proto buffers use a pure binary representation,
   *  whereas JSON representations use base64.
   */
  // const content = Buffer.from('string')
  /**
   *  URI that points to a file that contains audio data bytes as specified in
   *  RecognitionConfig google.cloud.speech.v2.RecognitionConfig. The file
   *  must not be compressed (for example, gzip). Currently, only Google Cloud
   *  Storage URIs are supported, which must be specified in the following
   *  format: `gs://bucket_name/object_name` (other URI formats return
   *  INVALID_ARGUMENT google.rpc.Code.INVALID_ARGUMENT). For more
   *  information, see Request
   *  URIs (https://cloud.google.com/storage/docs/reference-uris).
   */
  // const uri = 'abc123'

  // Imports the Speech library
  const {SpeechClient} = require('@google-cloud/speech').v2;

  // Instantiates a client
  const speechClient = new SpeechClient();

  async function callRecognize() {
    // Construct request
    const request = {
      recognizer,
    };

    // Run request
    const response = await speechClient.recognize(request);
    console.log(response);
  }

  callRecognize();
  // [END speech_v2_generated_Speech_Recognize_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
