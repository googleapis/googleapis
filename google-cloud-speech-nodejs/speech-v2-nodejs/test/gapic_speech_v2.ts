// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as speechModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.SpeechClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new speechModule.v2.SpeechClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'speech.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new speechModule.v2.SpeechClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = speechModule.v2.SpeechClient.servicePath;
                assert.strictEqual(servicePath, 'speech.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = speechModule.v2.SpeechClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'speech.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new speechModule.v2.SpeechClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'speech.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new speechModule.v2.SpeechClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'speech.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new speechModule.v2.SpeechClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'speech.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new speechModule.v2.SpeechClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'speech.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new speechModule.v2.SpeechClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = speechModule.v2.SpeechClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new speechModule.v2.SpeechClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new speechModule.v2.SpeechClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.speechStub, undefined);
            await client.initialize();
            assert(client.speechStub);
        });

        it('has close method for the initialized client', done => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.speechStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.speechStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getRecognizer', () => {
        it('invokes getRecognizer without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Recognizer()
            );
            client.innerApiCalls.getRecognizer = stubSimpleCall(expectedResponse);
            const [response] = await client.getRecognizer(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRecognizer without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Recognizer()
            );
            client.innerApiCalls.getRecognizer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRecognizer(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IRecognizer|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRecognizer with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRecognizer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRecognizer(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRecognizer with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRecognizer(request), expectedError);
        });
    });

    describe('recognize', () => {
        it('invokes recognize without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.RecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeResponse()
            );
            client.innerApiCalls.recognize = stubSimpleCall(expectedResponse);
            const [response] = await client.recognize(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes recognize without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.RecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeResponse()
            );
            client.innerApiCalls.recognize = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.recognize(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IRecognizeResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes recognize with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.RecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.recognize = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.recognize(request), expectedError);
            const actualRequest = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.recognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes recognize with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.RecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.RecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.recognize(request), expectedError);
        });
    });

    describe('getConfig', () => {
        it('invokes getConfig without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Config()
            );
            client.innerApiCalls.getConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getConfig without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Config()
            );
            client.innerApiCalls.getConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getConfig with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getConfig with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getConfig(request), expectedError);
        });
    });

    describe('updateConfig', () => {
        it('invokes updateConfig without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateConfigRequest()
            );
            request.config ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateConfigRequest', ['config', 'name']);
            request.config.name = defaultValue1;
            const expectedHeaderRequestParams = `config.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Config()
            );
            client.innerApiCalls.updateConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.updateConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateConfig without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateConfigRequest()
            );
            request.config ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateConfigRequest', ['config', 'name']);
            request.config.name = defaultValue1;
            const expectedHeaderRequestParams = `config.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.Config()
            );
            client.innerApiCalls.updateConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateConfig with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateConfigRequest()
            );
            request.config ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateConfigRequest', ['config', 'name']);
            request.config.name = defaultValue1;
            const expectedHeaderRequestParams = `config.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateConfig with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateConfigRequest()
            );
            request.config ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateConfigRequest', ['config', 'name']);
            request.config.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateConfig(request), expectedError);
        });
    });

    describe('getCustomClass', () => {
        it('invokes getCustomClass without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.CustomClass()
            );
            client.innerApiCalls.getCustomClass = stubSimpleCall(expectedResponse);
            const [response] = await client.getCustomClass(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.CustomClass()
            );
            client.innerApiCalls.getCustomClass = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCustomClass(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.ICustomClass|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCustomClass = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCustomClass with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getCustomClass(request), expectedError);
        });
    });

    describe('getPhraseSet', () => {
        it('invokes getPhraseSet without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.PhraseSet()
            );
            client.innerApiCalls.getPhraseSet = stubSimpleCall(expectedResponse);
            const [response] = await client.getPhraseSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.PhraseSet()
            );
            client.innerApiCalls.getPhraseSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPhraseSet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IPhraseSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getPhraseSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPhraseSet with closed client', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.GetPhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.GetPhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getPhraseSet(request), expectedError);
        });
    });

    describe('createRecognizer', () => {
        it('invokes createRecognizer without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateRecognizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRecognizer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createRecognizer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRecognizer without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateRecognizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRecognizer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRecognizer(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRecognizer with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateRecognizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRecognizer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createRecognizer(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRecognizer with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateRecognizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRecognizer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createRecognizer(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateRecognizerProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateRecognizerProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateRecognizerProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateRecognizerProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateRecognizer', () => {
        it('invokes updateRecognizer without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateRecognizerRequest()
            );
            request.recognizer ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateRecognizerRequest', ['recognizer', 'name']);
            request.recognizer.name = defaultValue1;
            const expectedHeaderRequestParams = `recognizer.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateRecognizer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateRecognizer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRecognizer without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateRecognizerRequest()
            );
            request.recognizer ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateRecognizerRequest', ['recognizer', 'name']);
            request.recognizer.name = defaultValue1;
            const expectedHeaderRequestParams = `recognizer.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateRecognizer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRecognizer(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRecognizer with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateRecognizerRequest()
            );
            request.recognizer ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateRecognizerRequest', ['recognizer', 'name']);
            request.recognizer.name = defaultValue1;
            const expectedHeaderRequestParams = `recognizer.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRecognizer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateRecognizer(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRecognizer with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateRecognizerRequest()
            );
            request.recognizer ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateRecognizerRequest', ['recognizer', 'name']);
            request.recognizer.name = defaultValue1;
            const expectedHeaderRequestParams = `recognizer.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRecognizer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateRecognizer(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateRecognizerProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateRecognizerProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateRecognizerProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateRecognizerProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteRecognizer', () => {
        it('invokes deleteRecognizer without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteRecognizer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteRecognizer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRecognizer without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteRecognizer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRecognizer(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRecognizer with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRecognizer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteRecognizer(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRecognizer with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRecognizer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteRecognizer(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteRecognizerProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteRecognizerProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteRecognizerProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteRecognizerProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeleteRecognizer', () => {
        it('invokes undeleteRecognizer without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeleteRecognizer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeleteRecognizer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRecognizer without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeleteRecognizer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteRecognizer(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRecognizer with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteRecognizer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeleteRecognizer(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRecognizer with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteRecognizerRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteRecognizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteRecognizer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeleteRecognizer(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRecognizer as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUndeleteRecognizerProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeleteRecognizerProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeleteRecognizerProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeleteRecognizerProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('batchRecognize', () => {
        it('invokes batchRecognize without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.BatchRecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.BatchRecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.batchRecognize = stubLongRunningCall(expectedResponse);
            const [operation] = await client.batchRecognize(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchRecognize without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.BatchRecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.BatchRecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.batchRecognize = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchRecognize(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchRecognize with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.BatchRecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.BatchRecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchRecognize = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.batchRecognize(request), expectedError);
            const actualRequest = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes batchRecognize with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.BatchRecognizeRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.BatchRecognizeRequest', ['recognizer']);
            request.recognizer = defaultValue1;
            const expectedHeaderRequestParams = `recognizer=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchRecognize = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.batchRecognize(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.batchRecognize as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkBatchRecognizeProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkBatchRecognizeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkBatchRecognizeProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkBatchRecognizeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createCustomClass', () => {
        it('invokes createCustomClass without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCustomClass = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCustomClass(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCustomClass = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCustomClass(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCustomClass = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCustomClass with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreateCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreateCustomClassRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCustomClass = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCustomClass(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateCustomClassProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateCustomClassProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateCustomClassProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateCustomClassProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateCustomClass', () => {
        it('invokes updateCustomClass without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateCustomClass = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateCustomClass(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateCustomClass = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCustomClass(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCustomClass = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateCustomClass with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdateCustomClassRequest()
            );
            request.customClass ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdateCustomClassRequest', ['customClass', 'name']);
            request.customClass.name = defaultValue1;
            const expectedHeaderRequestParams = `custom_class.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCustomClass = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateCustomClass(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateCustomClassProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateCustomClassProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateCustomClassProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateCustomClassProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteCustomClass', () => {
        it('invokes deleteCustomClass without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCustomClass = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteCustomClass(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCustomClass = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCustomClass(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCustomClass = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCustomClass with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCustomClass = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteCustomClass(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteCustomClassProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteCustomClassProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteCustomClassProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteCustomClassProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeleteCustomClass', () => {
        it('invokes undeleteCustomClass without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeleteCustomClass = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeleteCustomClass(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteCustomClass without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeleteCustomClass = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteCustomClass(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteCustomClass with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteCustomClass = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeleteCustomClass(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteCustomClass with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeleteCustomClassRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeleteCustomClassRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteCustomClass = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeleteCustomClass(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteCustomClass as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUndeleteCustomClassProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeleteCustomClassProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeleteCustomClassProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeleteCustomClassProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createPhraseSet', () => {
        it('invokes createPhraseSet without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createPhraseSet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createPhraseSet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createPhraseSet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPhraseSet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createPhraseSet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createPhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPhraseSet with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.CreatePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.CreatePhraseSetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createPhraseSet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createPhraseSet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreatePhraseSetProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreatePhraseSetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreatePhraseSetProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreatePhraseSetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updatePhraseSet', () => {
        it('invokes updatePhraseSet without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updatePhraseSet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updatePhraseSet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updatePhraseSet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updatePhraseSet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updatePhraseSet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updatePhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updatePhraseSet with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UpdatePhraseSetRequest()
            );
            request.phraseSet ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UpdatePhraseSetRequest', ['phraseSet', 'name']);
            request.phraseSet.name = defaultValue1;
            const expectedHeaderRequestParams = `phrase_set.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updatePhraseSet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updatePhraseSet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updatePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdatePhraseSetProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdatePhraseSetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdatePhraseSetProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdatePhraseSetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deletePhraseSet', () => {
        it('invokes deletePhraseSet without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deletePhraseSet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deletePhraseSet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deletePhraseSet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePhraseSet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePhraseSet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deletePhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePhraseSet with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.DeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.DeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePhraseSet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deletePhraseSet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeletePhraseSetProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeletePhraseSetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeletePhraseSetProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeletePhraseSetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeletePhraseSet', () => {
        it('invokes undeletePhraseSet without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeletePhraseSet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeletePhraseSet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeletePhraseSet without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.undeletePhraseSet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeletePhraseSet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeletePhraseSet with call error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeletePhraseSet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeletePhraseSet(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeletePhraseSet with LRO error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.UndeletePhraseSetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.UndeletePhraseSetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeletePhraseSet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeletePhraseSet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeletePhraseSet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUndeletePhraseSetProgress without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeletePhraseSetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeletePhraseSetProgress with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeletePhraseSetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('streamingRecognize', () => {
        it('invokes streamingRecognize without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.StreamingRecognizeRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.speech.v2.StreamingRecognizeResponse()
            );
            client.innerApiCalls.streamingRecognize = stubBidiStreamingCall(expectedResponse);
            const stream = client.streamingRecognize();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.speech.v2.StreamingRecognizeResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.streamingRecognize as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes streamingRecognize with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.StreamingRecognizeRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.streamingRecognize = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.streamingRecognize();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.speech.v2.StreamingRecognizeResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.streamingRecognize as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('listRecognizers', () => {
        it('invokes listRecognizers without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
            ];
            client.innerApiCalls.listRecognizers = stubSimpleCall(expectedResponse);
            const [response] = await client.listRecognizers(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRecognizers without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
            ];
            client.innerApiCalls.listRecognizers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRecognizers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IRecognizer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRecognizers with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRecognizers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRecognizers(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRecognizers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRecognizersStream without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
            ];
            client.descriptors.page.listRecognizers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRecognizersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.Recognizer[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.Recognizer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRecognizers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRecognizers, request));
            assert(
                (client.descriptors.page.listRecognizers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRecognizersStream with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRecognizers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRecognizersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.Recognizer[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.Recognizer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRecognizers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRecognizers, request));
            assert(
                (client.descriptors.page.listRecognizers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRecognizers without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
              generateSampleMessage(new protos.google.cloud.speech.v2.Recognizer()),
            ];
            client.descriptors.page.listRecognizers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.speech.v2.IRecognizer[] = [];
            const iterable = client.listRecognizersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRecognizers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRecognizers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRecognizers with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListRecognizersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListRecognizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRecognizers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRecognizersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.speech.v2.IRecognizer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRecognizers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRecognizers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listCustomClasses', () => {
        it('invokes listCustomClasses without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
            ];
            client.innerApiCalls.listCustomClasses = stubSimpleCall(expectedResponse);
            const [response] = await client.listCustomClasses(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClasses without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
            ];
            client.innerApiCalls.listCustomClasses = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCustomClasses(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.ICustomClass[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClasses with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCustomClasses = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCustomClasses(request), expectedError);
            const actualRequest = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCustomClasses as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCustomClassesStream without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
            ];
            client.descriptors.page.listCustomClasses.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCustomClassesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.CustomClass[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.CustomClass) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCustomClasses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomClasses, request));
            assert(
                (client.descriptors.page.listCustomClasses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listCustomClassesStream with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCustomClasses.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCustomClassesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.CustomClass[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.CustomClass) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCustomClasses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCustomClasses, request));
            assert(
                (client.descriptors.page.listCustomClasses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listCustomClasses without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
              generateSampleMessage(new protos.google.cloud.speech.v2.CustomClass()),
            ];
            client.descriptors.page.listCustomClasses.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.speech.v2.ICustomClass[] = [];
            const iterable = client.listCustomClassesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listCustomClasses with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListCustomClassesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListCustomClassesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCustomClasses.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCustomClassesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.speech.v2.ICustomClass[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCustomClasses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listPhraseSets', () => {
        it('invokes listPhraseSets without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
            ];
            client.innerApiCalls.listPhraseSets = stubSimpleCall(expectedResponse);
            const [response] = await client.listPhraseSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSets without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
            ];
            client.innerApiCalls.listPhraseSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPhraseSets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.speech.v2.IPhraseSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSets with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listPhraseSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPhraseSets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPhraseSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPhraseSetsStream without error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
            ];
            client.descriptors.page.listPhraseSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPhraseSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.PhraseSet[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.PhraseSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPhraseSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseSets, request));
            assert(
                (client.descriptors.page.listPhraseSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listPhraseSetsStream with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPhraseSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPhraseSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.speech.v2.PhraseSet[] = [];
                stream.on('data', (response: protos.google.cloud.speech.v2.PhraseSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPhraseSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseSets, request));
            assert(
                (client.descriptors.page.listPhraseSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listPhraseSets without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
              generateSampleMessage(new protos.google.cloud.speech.v2.PhraseSet()),
            ];
            client.descriptors.page.listPhraseSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.speech.v2.IPhraseSet[] = [];
            const iterable = client.listPhraseSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPhraseSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listPhraseSets with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.speech.v2.ListPhraseSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.speech.v2.ListPhraseSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPhraseSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPhraseSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.speech.v2.IPhraseSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPhraseSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new speechModule.v2.SpeechClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('config', async () => {
            const fakePath = "/rendered/path/config";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.configPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.configPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('configPath', () => {
                const result = client.configPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.configPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromConfigName', () => {
                const result = client.matchProjectFromConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.configPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromConfigName', () => {
                const result = client.matchLocationFromConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.configPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cryptoKey', async () => {
            const fakePath = "/rendered/path/cryptoKey";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                key_ring: "keyRingValue",
                crypto_key: "cryptoKeyValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cryptoKeyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cryptoKeyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cryptoKeyPath', () => {
                const result = client.cryptoKeyPath("projectValue", "locationValue", "keyRingValue", "cryptoKeyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cryptoKeyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCryptoKeyName', () => {
                const result = client.matchProjectFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCryptoKeyName', () => {
                const result = client.matchLocationFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeyRingFromCryptoKeyName', () => {
                const result = client.matchKeyRingFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "keyRingValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCryptoKeyFromCryptoKeyName', () => {
                const result = client.matchCryptoKeyFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "cryptoKeyValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cryptoKeyVersion', async () => {
            const fakePath = "/rendered/path/cryptoKeyVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                key_ring: "keyRingValue",
                crypto_key: "cryptoKeyValue",
                crypto_key_version: "cryptoKeyVersionValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cryptoKeyVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cryptoKeyVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cryptoKeyVersionPath', () => {
                const result = client.cryptoKeyVersionPath("projectValue", "locationValue", "keyRingValue", "cryptoKeyValue", "cryptoKeyVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCryptoKeyVersionName', () => {
                const result = client.matchProjectFromCryptoKeyVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCryptoKeyVersionName', () => {
                const result = client.matchLocationFromCryptoKeyVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeyRingFromCryptoKeyVersionName', () => {
                const result = client.matchKeyRingFromCryptoKeyVersionName(fakePath);
                assert.strictEqual(result, "keyRingValue");
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCryptoKeyFromCryptoKeyVersionName', () => {
                const result = client.matchCryptoKeyFromCryptoKeyVersionName(fakePath);
                assert.strictEqual(result, "cryptoKeyValue");
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCryptoKeyVersionFromCryptoKeyVersionName', () => {
                const result = client.matchCryptoKeyVersionFromCryptoKeyVersionName(fakePath);
                assert.strictEqual(result, "cryptoKeyVersionValue");
                assert((client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customClass', async () => {
            const fakePath = "/rendered/path/customClass";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                custom_class: "customClassValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customClassPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customClassPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customClassPath', () => {
                const result = client.customClassPath("projectValue", "locationValue", "customClassValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customClassPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCustomClassName', () => {
                const result = client.matchProjectFromCustomClassName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCustomClassName', () => {
                const result = client.matchLocationFromCustomClassName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomClassFromCustomClassName', () => {
                const result = client.matchCustomClassFromCustomClassName(fakePath);
                assert.strictEqual(result, "customClassValue");
                assert((client.pathTemplates.customClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('phraseSet', async () => {
            const fakePath = "/rendered/path/phraseSet";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                phrase_set: "phraseSetValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.phraseSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.phraseSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('phraseSetPath', () => {
                const result = client.phraseSetPath("projectValue", "locationValue", "phraseSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.phraseSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromPhraseSetName', () => {
                const result = client.matchProjectFromPhraseSetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromPhraseSetName', () => {
                const result = client.matchLocationFromPhraseSetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPhraseSetFromPhraseSetName', () => {
                const result = client.matchPhraseSetFromPhraseSetName(fakePath);
                assert.strictEqual(result, "phraseSetValue");
                assert((client.pathTemplates.phraseSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('recognizer', async () => {
            const fakePath = "/rendered/path/recognizer";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                recognizer: "recognizerValue",
            };
            const client = new speechModule.v2.SpeechClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.recognizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.recognizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('recognizerPath', () => {
                const result = client.recognizerPath("projectValue", "locationValue", "recognizerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.recognizerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRecognizerName', () => {
                const result = client.matchProjectFromRecognizerName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.recognizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRecognizerName', () => {
                const result = client.matchLocationFromRecognizerName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.recognizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRecognizerFromRecognizerName', () => {
                const result = client.matchRecognizerFromRecognizerName(fakePath);
                assert.strictEqual(result, "recognizerValue");
                assert((client.pathTemplates.recognizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
