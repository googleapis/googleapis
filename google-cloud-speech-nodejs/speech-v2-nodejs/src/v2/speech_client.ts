// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform, PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v2/speech_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './speech_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Enables speech transcription and resource management.
 * @class
 * @memberof v2
 */
export class SpeechClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('speech');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  speechStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SpeechClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SpeechClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SpeechClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'speech.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      configPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/config'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'
      ),
      cryptoKeyVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}'
      ),
      customClassPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/customClasses/{custom_class}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      phraseSetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/phraseSets/{phrase_set}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      recognizerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/recognizers/{recognizer}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listRecognizers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'recognizers'),
      listCustomClasses:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customClasses'),
      listPhraseSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'phraseSets')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      streamingRecognize: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries)
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v2/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v2/{name=projects/*}/locations',},{selector: 'google.longrunning.Operations.CancelOperation',post: '/v2/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v2/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v2/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v2/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createRecognizerResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.Recognizer') as gax.protobuf.Type;
    const createRecognizerMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const updateRecognizerResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.Recognizer') as gax.protobuf.Type;
    const updateRecognizerMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const deleteRecognizerResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.Recognizer') as gax.protobuf.Type;
    const deleteRecognizerMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const undeleteRecognizerResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.Recognizer') as gax.protobuf.Type;
    const undeleteRecognizerMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const batchRecognizeResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.BatchRecognizeResponse') as gax.protobuf.Type;
    const batchRecognizeMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const createCustomClassResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.CustomClass') as gax.protobuf.Type;
    const createCustomClassMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const updateCustomClassResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.CustomClass') as gax.protobuf.Type;
    const updateCustomClassMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const deleteCustomClassResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.CustomClass') as gax.protobuf.Type;
    const deleteCustomClassMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const undeleteCustomClassResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.CustomClass') as gax.protobuf.Type;
    const undeleteCustomClassMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const createPhraseSetResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.PhraseSet') as gax.protobuf.Type;
    const createPhraseSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const updatePhraseSetResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.PhraseSet') as gax.protobuf.Type;
    const updatePhraseSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const deletePhraseSetResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.PhraseSet') as gax.protobuf.Type;
    const deletePhraseSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;
    const undeletePhraseSetResponse = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.PhraseSet') as gax.protobuf.Type;
    const undeletePhraseSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.speech.v2.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createRecognizer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRecognizerResponse.decode.bind(createRecognizerResponse),
        createRecognizerMetadata.decode.bind(createRecognizerMetadata)),
      updateRecognizer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateRecognizerResponse.decode.bind(updateRecognizerResponse),
        updateRecognizerMetadata.decode.bind(updateRecognizerMetadata)),
      deleteRecognizer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRecognizerResponse.decode.bind(deleteRecognizerResponse),
        deleteRecognizerMetadata.decode.bind(deleteRecognizerMetadata)),
      undeleteRecognizer: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeleteRecognizerResponse.decode.bind(undeleteRecognizerResponse),
        undeleteRecognizerMetadata.decode.bind(undeleteRecognizerMetadata)),
      batchRecognize: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchRecognizeResponse.decode.bind(batchRecognizeResponse),
        batchRecognizeMetadata.decode.bind(batchRecognizeMetadata)),
      createCustomClass: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCustomClassResponse.decode.bind(createCustomClassResponse),
        createCustomClassMetadata.decode.bind(createCustomClassMetadata)),
      updateCustomClass: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCustomClassResponse.decode.bind(updateCustomClassResponse),
        updateCustomClassMetadata.decode.bind(updateCustomClassMetadata)),
      deleteCustomClass: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCustomClassResponse.decode.bind(deleteCustomClassResponse),
        deleteCustomClassMetadata.decode.bind(deleteCustomClassMetadata)),
      undeleteCustomClass: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeleteCustomClassResponse.decode.bind(undeleteCustomClassResponse),
        undeleteCustomClassMetadata.decode.bind(undeleteCustomClassMetadata)),
      createPhraseSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPhraseSetResponse.decode.bind(createPhraseSetResponse),
        createPhraseSetMetadata.decode.bind(createPhraseSetMetadata)),
      updatePhraseSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updatePhraseSetResponse.decode.bind(updatePhraseSetResponse),
        updatePhraseSetMetadata.decode.bind(updatePhraseSetMetadata)),
      deletePhraseSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePhraseSetResponse.decode.bind(deletePhraseSetResponse),
        deletePhraseSetMetadata.decode.bind(deletePhraseSetMetadata)),
      undeletePhraseSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeletePhraseSetResponse.decode.bind(undeletePhraseSetResponse),
        undeletePhraseSetMetadata.decode.bind(undeletePhraseSetMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.speech.v2.Speech', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.speechStub) {
      return this.speechStub;
    }

    // Put together the "service stub" for
    // google.cloud.speech.v2.Speech.
    this.speechStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.speech.v2.Speech') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.speech.v2.Speech,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const speechStubMethods =
        ['createRecognizer', 'listRecognizers', 'getRecognizer', 'updateRecognizer', 'deleteRecognizer', 'undeleteRecognizer', 'recognize', 'streamingRecognize', 'batchRecognize', 'getConfig', 'updateConfig', 'createCustomClass', 'listCustomClasses', 'getCustomClass', 'updateCustomClass', 'deleteCustomClass', 'undeleteCustomClass', 'createPhraseSet', 'listPhraseSets', 'getPhraseSet', 'updatePhraseSet', 'deletePhraseSet', 'undeletePhraseSet'];
    for (const methodName of speechStubMethods) {
      const callPromise = this.speechStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            if (methodName in this.descriptors.stream) {
              const stream = new PassThrough({objectMode: true});
              setImmediate(() => {
                stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));
              });
              return stream;
            }
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.speechStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'speech.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'speech.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Returns the requested
 * {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}. Fails with
 * {@link protos.google.rpc.Code.NOT_FOUND|NOT_FOUND} if the requested Recognizer doesn't
 * exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Recognizer to retrieve. The expected format is
 *   `projects/{project}/locations/{location}/recognizers/{recognizer}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.get_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_GetRecognizer_async
 */
  getRecognizer(
      request?: protos.google.cloud.speech.v2.IGetRecognizerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizer,
        protos.google.cloud.speech.v2.IGetRecognizerRequest|undefined, {}|undefined
      ]>;
  getRecognizer(
      request: protos.google.cloud.speech.v2.IGetRecognizerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.IRecognizer,
          protos.google.cloud.speech.v2.IGetRecognizerRequest|null|undefined,
          {}|null|undefined>): void;
  getRecognizer(
      request: protos.google.cloud.speech.v2.IGetRecognizerRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.IRecognizer,
          protos.google.cloud.speech.v2.IGetRecognizerRequest|null|undefined,
          {}|null|undefined>): void;
  getRecognizer(
      request?: protos.google.cloud.speech.v2.IGetRecognizerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.IRecognizer,
          protos.google.cloud.speech.v2.IGetRecognizerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.IRecognizer,
          protos.google.cloud.speech.v2.IGetRecognizerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizer,
        protos.google.cloud.speech.v2.IGetRecognizerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getRecognizer request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.IRecognizer,
        protos.google.cloud.speech.v2.IGetRecognizerRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getRecognizer response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getRecognizer(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.IRecognizer,
        protos.google.cloud.speech.v2.IGetRecognizerRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getRecognizer response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Performs synchronous Speech recognition: receive results after all audio
 * has been sent and processed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.recognizer
 *   Required. The name of the Recognizer to use during recognition. The
 *   expected format is
 *   `projects/{project}/locations/{location}/recognizers/{recognizer}`. The
 *   {recognizer} segment may be set to `_` to use an empty implicit Recognizer.
 * @param {google.cloud.speech.v2.RecognitionConfig} request.config
 *   Features and audio metadata to use for the Automatic Speech Recognition.
 *   This field in combination with the
 *   {@link protos.google.cloud.speech.v2.RecognizeRequest.config_mask|config_mask} field
 *   can be used to override parts of the
 *   {@link protos.google.cloud.speech.v2.Recognizer.default_recognition_config|default_recognition_config}
 *   of the Recognizer resource.
 * @param {google.protobuf.FieldMask} request.configMask
 *   The list of fields in
 *   {@link protos.google.cloud.speech.v2.RecognizeRequest.config|config} that override the
 *   values in the
 *   {@link protos.google.cloud.speech.v2.Recognizer.default_recognition_config|default_recognition_config}
 *   of the recognizer during this recognition request. If no mask is provided,
 *   all non-default valued fields in
 *   {@link protos.google.cloud.speech.v2.RecognizeRequest.config|config} override the
 *   values in the recognizer for this recognition request. If a mask is
 *   provided, only the fields listed in the mask override the config in the
 *   recognizer for this recognition request. If a wildcard (`*`) is provided,
 *   {@link protos.google.cloud.speech.v2.RecognizeRequest.config|config} completely
 *   overrides and replaces the config in the recognizer for this recognition
 *   request.
 * @param {Buffer} request.content
 *   The audio data bytes encoded as specified in
 *   {@link protos.google.cloud.speech.v2.RecognitionConfig|RecognitionConfig}. As
 *   with all bytes fields, proto buffers use a pure binary representation,
 *   whereas JSON representations use base64.
 * @param {string} request.uri
 *   URI that points to a file that contains audio data bytes as specified in
 *   {@link protos.google.cloud.speech.v2.RecognitionConfig|RecognitionConfig}. The file
 *   must not be compressed (for example, gzip). Currently, only Google Cloud
 *   Storage URIs are supported, which must be specified in the following
 *   format: `gs://bucket_name/object_name` (other URI formats return
 *   {@link protos.google.rpc.Code.INVALID_ARGUMENT|INVALID_ARGUMENT}). For more
 *   information, see [Request
 *   URIs](https://cloud.google.com/storage/docs/reference-uris).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.RecognizeResponse|RecognizeResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.recognize.js</caption>
 * region_tag:speech_v2_generated_Speech_Recognize_async
 */
  recognize(
      request?: protos.google.cloud.speech.v2.IRecognizeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizeResponse,
        protos.google.cloud.speech.v2.IRecognizeRequest|undefined, {}|undefined
      ]>;
  recognize(
      request: protos.google.cloud.speech.v2.IRecognizeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.IRecognizeResponse,
          protos.google.cloud.speech.v2.IRecognizeRequest|null|undefined,
          {}|null|undefined>): void;
  recognize(
      request: protos.google.cloud.speech.v2.IRecognizeRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.IRecognizeResponse,
          protos.google.cloud.speech.v2.IRecognizeRequest|null|undefined,
          {}|null|undefined>): void;
  recognize(
      request?: protos.google.cloud.speech.v2.IRecognizeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.IRecognizeResponse,
          protos.google.cloud.speech.v2.IRecognizeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.IRecognizeResponse,
          protos.google.cloud.speech.v2.IRecognizeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizeResponse,
        protos.google.cloud.speech.v2.IRecognizeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'recognizer': request.recognizer ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('recognize request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.IRecognizeResponse,
        protos.google.cloud.speech.v2.IRecognizeRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('recognize response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.recognize(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.IRecognizeResponse,
        protos.google.cloud.speech.v2.IRecognizeRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('recognize response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Returns the requested {@link protos.google.cloud.speech.v2.Config|Config}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the config to retrieve. There is exactly one config
 *   resource per project per location. The expected format is
 *   `projects/{project}/locations/{location}/config`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.Config|Config}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.get_config.js</caption>
 * region_tag:speech_v2_generated_Speech_GetConfig_async
 */
  getConfig(
      request?: protos.google.cloud.speech.v2.IGetConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IGetConfigRequest|undefined, {}|undefined
      ]>;
  getConfig(
      request: protos.google.cloud.speech.v2.IGetConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IGetConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getConfig(
      request: protos.google.cloud.speech.v2.IGetConfigRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IGetConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getConfig(
      request?: protos.google.cloud.speech.v2.IGetConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IGetConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IGetConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IGetConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IGetConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IGetConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates the {@link protos.google.cloud.speech.v2.Config|Config}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.Config} request.config
 *   Required. The config to update.
 *
 *   The config's `name` field is used to identify the config to be updated.
 *   The expected format is `projects/{project}/locations/{location}/config`.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.Config|Config}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_config.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdateConfig_async
 */
  updateConfig(
      request?: protos.google.cloud.speech.v2.IUpdateConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IUpdateConfigRequest|undefined, {}|undefined
      ]>;
  updateConfig(
      request: protos.google.cloud.speech.v2.IUpdateConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IUpdateConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateConfig(
      request: protos.google.cloud.speech.v2.IUpdateConfigRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IUpdateConfigRequest|null|undefined,
          {}|null|undefined>): void;
  updateConfig(
      request?: protos.google.cloud.speech.v2.IUpdateConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IUpdateConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.IConfig,
          protos.google.cloud.speech.v2.IUpdateConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IUpdateConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'config.name': request.config!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IUpdateConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.IConfig,
        protos.google.cloud.speech.v2.IUpdateConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Returns the requested
 * {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomClass to retrieve. The expected format is
 *   `projects/{project}/locations/{location}/customClasses/{custom_class}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.get_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_GetCustomClass_async
 */
  getCustomClass(
      request?: protos.google.cloud.speech.v2.IGetCustomClassRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.ICustomClass,
        protos.google.cloud.speech.v2.IGetCustomClassRequest|undefined, {}|undefined
      ]>;
  getCustomClass(
      request: protos.google.cloud.speech.v2.IGetCustomClassRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.ICustomClass,
          protos.google.cloud.speech.v2.IGetCustomClassRequest|null|undefined,
          {}|null|undefined>): void;
  getCustomClass(
      request: protos.google.cloud.speech.v2.IGetCustomClassRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.ICustomClass,
          protos.google.cloud.speech.v2.IGetCustomClassRequest|null|undefined,
          {}|null|undefined>): void;
  getCustomClass(
      request?: protos.google.cloud.speech.v2.IGetCustomClassRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.ICustomClass,
          protos.google.cloud.speech.v2.IGetCustomClassRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.ICustomClass,
          protos.google.cloud.speech.v2.IGetCustomClassRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.ICustomClass,
        protos.google.cloud.speech.v2.IGetCustomClassRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCustomClass request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.ICustomClass,
        protos.google.cloud.speech.v2.IGetCustomClassRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCustomClass response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCustomClass(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.ICustomClass,
        protos.google.cloud.speech.v2.IGetCustomClassRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCustomClass response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Returns the requested
 * {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PhraseSet to retrieve. The expected format is
 *   `projects/{project}/locations/{location}/phraseSets/{phrase_set}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.get_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_GetPhraseSet_async
 */
  getPhraseSet(
      request?: protos.google.cloud.speech.v2.IGetPhraseSetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IPhraseSet,
        protos.google.cloud.speech.v2.IGetPhraseSetRequest|undefined, {}|undefined
      ]>;
  getPhraseSet(
      request: protos.google.cloud.speech.v2.IGetPhraseSetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.speech.v2.IPhraseSet,
          protos.google.cloud.speech.v2.IGetPhraseSetRequest|null|undefined,
          {}|null|undefined>): void;
  getPhraseSet(
      request: protos.google.cloud.speech.v2.IGetPhraseSetRequest,
      callback: Callback<
          protos.google.cloud.speech.v2.IPhraseSet,
          protos.google.cloud.speech.v2.IGetPhraseSetRequest|null|undefined,
          {}|null|undefined>): void;
  getPhraseSet(
      request?: protos.google.cloud.speech.v2.IGetPhraseSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.speech.v2.IPhraseSet,
          protos.google.cloud.speech.v2.IGetPhraseSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.speech.v2.IPhraseSet,
          protos.google.cloud.speech.v2.IGetPhraseSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.speech.v2.IPhraseSet,
        protos.google.cloud.speech.v2.IGetPhraseSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getPhraseSet request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.speech.v2.IPhraseSet,
        protos.google.cloud.speech.v2.IGetPhraseSetRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getPhraseSet response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getPhraseSet(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.speech.v2.IPhraseSet,
        protos.google.cloud.speech.v2.IGetPhraseSetRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getPhraseSet response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Performs bidirectional streaming speech recognition: receive results while
 * sending audio. This method is only available via the gRPC API (not REST).
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing {@link protos.google.cloud.speech.v2.StreamingRecognizeRequest|StreamingRecognizeRequest} for write() method, and
 *   will emit objects representing {@link protos.google.cloud.speech.v2.StreamingRecognizeResponse|StreamingRecognizeResponse} on 'data' event asynchronously.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.streaming_recognize.js</caption>
 * region_tag:speech_v2_generated_Speech_StreamingRecognize_async
 */
  streamingRecognize(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize().catch(err => {throw err});
    this._log.info('streamingRecognize stream %j', options);
    return this.innerApiCalls.streamingRecognize(null, options);
  }

/**
 * Creates a {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.Recognizer} request.recognizer
 *   Required. The Recognizer to create.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the Recognizer, but do not
 *   actually create it.
 * @param {string} request.recognizerId
 *   The ID to use for the Recognizer, which will become the final component of
 *   the Recognizer's resource name.
 *
 *   This value should be 4-63 characters, and valid characters
 *   are /{@link protos.0-9|a-z}-/.
 * @param {string} request.parent
 *   Required. The project and location where this Recognizer will be created.
 *   The expected format is `projects/{project}/locations/{location}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_CreateRecognizer_async
 */
  createRecognizer(
      request?: protos.google.cloud.speech.v2.ICreateRecognizerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createRecognizer(
      request: protos.google.cloud.speech.v2.ICreateRecognizerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createRecognizer(
      request: protos.google.cloud.speech.v2.ICreateRecognizerRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createRecognizer(
      request?: protos.google.cloud.speech.v2.ICreateRecognizerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createRecognizer response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createRecognizer request %j', request);
    return this.innerApiCalls.createRecognizer(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createRecognizer response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createRecognizer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_CreateRecognizer_async
 */
  async checkCreateRecognizerProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('createRecognizer long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createRecognizer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Updates the {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.Recognizer} request.recognizer
 *   Required. The Recognizer to update.
 *
 *   The Recognizer's `name` field is used to identify the Recognizer to update.
 *   Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to update. If empty, all non-default valued fields are
 *   considered for update. Use `*` to update the entire Recognizer resource.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the updated Recognizer, but do not
 *   actually update it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdateRecognizer_async
 */
  updateRecognizer(
      request?: protos.google.cloud.speech.v2.IUpdateRecognizerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateRecognizer(
      request: protos.google.cloud.speech.v2.IUpdateRecognizerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateRecognizer(
      request: protos.google.cloud.speech.v2.IUpdateRecognizerRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateRecognizer(
      request?: protos.google.cloud.speech.v2.IUpdateRecognizerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'recognizer.name': request.recognizer!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateRecognizer response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateRecognizer request %j', request);
    return this.innerApiCalls.updateRecognizer(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateRecognizer response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateRecognizer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdateRecognizer_async
 */
  async checkUpdateRecognizerProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('updateRecognizer long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateRecognizer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Deletes the {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Recognizer to delete.
 *   Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the deleted Recognizer, but do not
 *   actually delete it.
 * @param {boolean} request.allowMissing
 *   If set to true, and the Recognizer is not found, the request will succeed
 *   and  be a no-op (no Operation is recorded in this case).
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_DeleteRecognizer_async
 */
  deleteRecognizer(
      request?: protos.google.cloud.speech.v2.IDeleteRecognizerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteRecognizer(
      request: protos.google.cloud.speech.v2.IDeleteRecognizerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteRecognizer(
      request: protos.google.cloud.speech.v2.IDeleteRecognizerRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteRecognizer(
      request?: protos.google.cloud.speech.v2.IDeleteRecognizerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteRecognizer response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteRecognizer request %j', request);
    return this.innerApiCalls.deleteRecognizer(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteRecognizer response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteRecognizer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_DeleteRecognizer_async
 */
  async checkDeleteRecognizerProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('deleteRecognizer long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteRecognizer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Undeletes the {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Recognizer to undelete.
 *   Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the undeleted Recognizer, but do
 *   not actually undelete it.
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeleteRecognizer_async
 */
  undeleteRecognizer(
      request?: protos.google.cloud.speech.v2.IUndeleteRecognizerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  undeleteRecognizer(
      request: protos.google.cloud.speech.v2.IUndeleteRecognizerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeleteRecognizer(
      request: protos.google.cloud.speech.v2.IUndeleteRecognizerRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeleteRecognizer(
      request?: protos.google.cloud.speech.v2.IUndeleteRecognizerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('undeleteRecognizer response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('undeleteRecognizer request %j', request);
    return this.innerApiCalls.undeleteRecognizer(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IRecognizer, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('undeleteRecognizer response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `undeleteRecognizer()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_recognizer.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeleteRecognizer_async
 */
  async checkUndeleteRecognizerProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('undeleteRecognizer long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeleteRecognizer, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.Recognizer, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Performs batch asynchronous speech recognition: send a request with N
 * audio files and receive a long running operation that can be polled to see
 * when the transcriptions are finished.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.recognizer
 *   Required. The name of the Recognizer to use during recognition. The
 *   expected format is
 *   `projects/{project}/locations/{location}/recognizers/{recognizer}`. The
 *   {recognizer} segment may be set to `_` to use an empty implicit Recognizer.
 * @param {google.cloud.speech.v2.RecognitionConfig} request.config
 *   Features and audio metadata to use for the Automatic Speech Recognition.
 *   This field in combination with the
 *   {@link protos.google.cloud.speech.v2.BatchRecognizeRequest.config_mask|config_mask}
 *   field can be used to override parts of the
 *   {@link protos.google.cloud.speech.v2.Recognizer.default_recognition_config|default_recognition_config}
 *   of the Recognizer resource.
 * @param {google.protobuf.FieldMask} request.configMask
 *   The list of fields in
 *   {@link protos.google.cloud.speech.v2.BatchRecognizeRequest.config|config} that override
 *   the values in the
 *   {@link protos.google.cloud.speech.v2.Recognizer.default_recognition_config|default_recognition_config}
 *   of the recognizer during this recognition request. If no mask is provided,
 *   all given fields in
 *   {@link protos.google.cloud.speech.v2.BatchRecognizeRequest.config|config} override the
 *   values in the recognizer for this recognition request. If a mask is
 *   provided, only the fields listed in the mask override the config in the
 *   recognizer for this recognition request. If a wildcard (`*`) is provided,
 *   {@link protos.google.cloud.speech.v2.BatchRecognizeRequest.config|config} completely
 *   overrides and replaces the config in the recognizer for this recognition
 *   request.
 * @param {number[]} request.files
 *   Audio files with file metadata for ASR.
 *   The maximum number of files allowed to be specified is 15.
 * @param {google.cloud.speech.v2.RecognitionOutputConfig} request.recognitionOutputConfig
 *   Configuration options for where to output the transcripts of each file.
 * @param {google.cloud.speech.v2.BatchRecognizeRequest.ProcessingStrategy} request.processingStrategy
 *   Processing strategy to use for this request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.batch_recognize.js</caption>
 * region_tag:speech_v2_generated_Speech_BatchRecognize_async
 */
  batchRecognize(
      request?: protos.google.cloud.speech.v2.IBatchRecognizeRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  batchRecognize(
      request: protos.google.cloud.speech.v2.IBatchRecognizeRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  batchRecognize(
      request: protos.google.cloud.speech.v2.IBatchRecognizeRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  batchRecognize(
      request?: protos.google.cloud.speech.v2.IBatchRecognizeRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'recognizer': request.recognizer ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('batchRecognize response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('batchRecognize request %j', request);
    return this.innerApiCalls.batchRecognize(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IBatchRecognizeResponse, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('batchRecognize response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `batchRecognize()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.batch_recognize.js</caption>
 * region_tag:speech_v2_generated_Speech_BatchRecognize_async
 */
  async checkBatchRecognizeProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.BatchRecognizeResponse, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('batchRecognize long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchRecognize, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.BatchRecognizeResponse, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Creates a {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.CustomClass} request.customClass
 *   Required. The CustomClass to create.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the CustomClass, but do not
 *   actually create it.
 * @param {string} request.customClassId
 *   The ID to use for the CustomClass, which will become the final component of
 *   the CustomClass's resource name.
 *
 *   This value should be 4-63 characters, and valid characters
 *   are /{@link protos.0-9|a-z}-/.
 * @param {string} request.parent
 *   Required. The project and location where this CustomClass will be created.
 *   The expected format is `projects/{project}/locations/{location}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_CreateCustomClass_async
 */
  createCustomClass(
      request?: protos.google.cloud.speech.v2.ICreateCustomClassRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCustomClass(
      request: protos.google.cloud.speech.v2.ICreateCustomClassRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCustomClass(
      request: protos.google.cloud.speech.v2.ICreateCustomClassRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCustomClass(
      request?: protos.google.cloud.speech.v2.ICreateCustomClassRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createCustomClass response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createCustomClass request %j', request);
    return this.innerApiCalls.createCustomClass(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createCustomClass response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createCustomClass()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_CreateCustomClass_async
 */
  async checkCreateCustomClassProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('createCustomClass long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCustomClass, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Updates the {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.CustomClass} request.customClass
 *   Required. The CustomClass to update.
 *
 *   The CustomClass's `name` field is used to identify the CustomClass to
 *   update. Format:
 *   `projects/{project}/locations/{location}/customClasses/{custom_class}`.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to be updated. If empty, all fields are considered for
 *   update.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the updated CustomClass, but do
 *   not actually update it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdateCustomClass_async
 */
  updateCustomClass(
      request?: protos.google.cloud.speech.v2.IUpdateCustomClassRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateCustomClass(
      request: protos.google.cloud.speech.v2.IUpdateCustomClassRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateCustomClass(
      request: protos.google.cloud.speech.v2.IUpdateCustomClassRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateCustomClass(
      request?: protos.google.cloud.speech.v2.IUpdateCustomClassRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'custom_class.name': request.customClass!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateCustomClass response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateCustomClass request %j', request);
    return this.innerApiCalls.updateCustomClass(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateCustomClass response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateCustomClass()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdateCustomClass_async
 */
  async checkUpdateCustomClassProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('updateCustomClass long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCustomClass, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Deletes the {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomClass to delete.
 *   Format:
 *   `projects/{project}/locations/{location}/customClasses/{custom_class}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the deleted CustomClass, but do
 *   not actually delete it.
 * @param {boolean} request.allowMissing
 *   If set to true, and the CustomClass is not found, the request will succeed
 *   and  be a no-op (no Operation is recorded in this case).
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_DeleteCustomClass_async
 */
  deleteCustomClass(
      request?: protos.google.cloud.speech.v2.IDeleteCustomClassRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCustomClass(
      request: protos.google.cloud.speech.v2.IDeleteCustomClassRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCustomClass(
      request: protos.google.cloud.speech.v2.IDeleteCustomClassRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCustomClass(
      request?: protos.google.cloud.speech.v2.IDeleteCustomClassRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteCustomClass response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteCustomClass request %j', request);
    return this.innerApiCalls.deleteCustomClass(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteCustomClass response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteCustomClass()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_DeleteCustomClass_async
 */
  async checkDeleteCustomClassProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('deleteCustomClass long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCustomClass, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Undeletes the {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the CustomClass to undelete.
 *   Format:
 *   `projects/{project}/locations/{location}/customClasses/{custom_class}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the undeleted CustomClass, but do
 *   not actually undelete it.
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeleteCustomClass_async
 */
  undeleteCustomClass(
      request?: protos.google.cloud.speech.v2.IUndeleteCustomClassRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  undeleteCustomClass(
      request: protos.google.cloud.speech.v2.IUndeleteCustomClassRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeleteCustomClass(
      request: protos.google.cloud.speech.v2.IUndeleteCustomClassRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeleteCustomClass(
      request?: protos.google.cloud.speech.v2.IUndeleteCustomClassRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('undeleteCustomClass response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('undeleteCustomClass request %j', request);
    return this.innerApiCalls.undeleteCustomClass(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.ICustomClass, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('undeleteCustomClass response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `undeleteCustomClass()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_custom_class.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeleteCustomClass_async
 */
  async checkUndeleteCustomClassProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('undeleteCustomClass long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeleteCustomClass, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.CustomClass, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Creates a {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.PhraseSet} request.phraseSet
 *   Required. The PhraseSet to create.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the PhraseSet, but do not
 *   actually create it.
 * @param {string} request.phraseSetId
 *   The ID to use for the PhraseSet, which will become the final component of
 *   the PhraseSet's resource name.
 *
 *   This value should be 4-63 characters, and valid characters
 *   are /{@link protos.0-9|a-z}-/.
 * @param {string} request.parent
 *   Required. The project and location where this PhraseSet will be created.
 *   The expected format is `projects/{project}/locations/{location}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_CreatePhraseSet_async
 */
  createPhraseSet(
      request?: protos.google.cloud.speech.v2.ICreatePhraseSetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createPhraseSet(
      request: protos.google.cloud.speech.v2.ICreatePhraseSetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createPhraseSet(
      request: protos.google.cloud.speech.v2.ICreatePhraseSetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createPhraseSet(
      request?: protos.google.cloud.speech.v2.ICreatePhraseSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createPhraseSet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createPhraseSet request %j', request);
    return this.innerApiCalls.createPhraseSet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createPhraseSet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createPhraseSet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.create_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_CreatePhraseSet_async
 */
  async checkCreatePhraseSetProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('createPhraseSet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createPhraseSet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Updates the {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.speech.v2.PhraseSet} request.phraseSet
 *   Required. The PhraseSet to update.
 *
 *   The PhraseSet's `name` field is used to identify the PhraseSet to update.
 *   Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The list of fields to update. If empty, all non-default valued fields are
 *   considered for update. Use `*` to update the entire PhraseSet resource.
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the updated PhraseSet, but do not
 *   actually update it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdatePhraseSet_async
 */
  updatePhraseSet(
      request?: protos.google.cloud.speech.v2.IUpdatePhraseSetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updatePhraseSet(
      request: protos.google.cloud.speech.v2.IUpdatePhraseSetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updatePhraseSet(
      request: protos.google.cloud.speech.v2.IUpdatePhraseSetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updatePhraseSet(
      request?: protos.google.cloud.speech.v2.IUpdatePhraseSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'phrase_set.name': request.phraseSet!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updatePhraseSet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updatePhraseSet request %j', request);
    return this.innerApiCalls.updatePhraseSet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updatePhraseSet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updatePhraseSet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.update_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_UpdatePhraseSet_async
 */
  async checkUpdatePhraseSetProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('updatePhraseSet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updatePhraseSet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Deletes the {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PhraseSet to delete.
 *   Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the deleted PhraseSet, but do not
 *   actually delete it.
 * @param {boolean} request.allowMissing
 *   If set to true, and the PhraseSet is not found, the request will succeed
 *   and  be a no-op (no Operation is recorded in this case).
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_DeletePhraseSet_async
 */
  deletePhraseSet(
      request?: protos.google.cloud.speech.v2.IDeletePhraseSetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deletePhraseSet(
      request: protos.google.cloud.speech.v2.IDeletePhraseSetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deletePhraseSet(
      request: protos.google.cloud.speech.v2.IDeletePhraseSetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deletePhraseSet(
      request?: protos.google.cloud.speech.v2.IDeletePhraseSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deletePhraseSet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deletePhraseSet request %j', request);
    return this.innerApiCalls.deletePhraseSet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deletePhraseSet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deletePhraseSet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.delete_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_DeletePhraseSet_async
 */
  async checkDeletePhraseSetProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('deletePhraseSet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deletePhraseSet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>;
  }
/**
 * Undeletes the {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PhraseSet to undelete.
 *   Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
 * @param {boolean} request.validateOnly
 *   If set, validate the request and preview the undeleted PhraseSet, but do
 *   not actually undelete it.
 * @param {string} request.etag
 *   This checksum is computed by the server based on the value of other
 *   fields. This may be sent on update, undelete, and delete requests to ensure
 *   the client has an up-to-date value before proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeletePhraseSet_async
 */
  undeletePhraseSet(
      request?: protos.google.cloud.speech.v2.IUndeletePhraseSetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  undeletePhraseSet(
      request: protos.google.cloud.speech.v2.IUndeletePhraseSetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeletePhraseSet(
      request: protos.google.cloud.speech.v2.IUndeletePhraseSetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeletePhraseSet(
      request?: protos.google.cloud.speech.v2.IUndeletePhraseSetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('undeletePhraseSet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('undeletePhraseSet request %j', request);
    return this.innerApiCalls.undeletePhraseSet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.speech.v2.IPhraseSet, protos.google.cloud.speech.v2.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('undeletePhraseSet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `undeletePhraseSet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.undelete_phrase_set.js</caption>
 * region_tag:speech_v2_generated_Speech_UndeletePhraseSet_async
 */
  async checkUndeletePhraseSetProgress(name: string): Promise<LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>>{
    this._log.info('undeletePhraseSet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeletePhraseSet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.speech.v2.PhraseSet, protos.google.cloud.speech.v2.OperationMetadata>;
  }
 /**
 * Lists Recognizers.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of Recognizers to list. The expected
 *   format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of Recognizers to return. The service may return fewer
 *   than this value. If unspecified, at most 5 Recognizers will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listRecognizersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listRecognizers(
      request?: protos.google.cloud.speech.v2.IListRecognizersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizer[],
        protos.google.cloud.speech.v2.IListRecognizersRequest|null,
        protos.google.cloud.speech.v2.IListRecognizersResponse
      ]>;
  listRecognizers(
      request: protos.google.cloud.speech.v2.IListRecognizersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListRecognizersRequest,
          protos.google.cloud.speech.v2.IListRecognizersResponse|null|undefined,
          protos.google.cloud.speech.v2.IRecognizer>): void;
  listRecognizers(
      request: protos.google.cloud.speech.v2.IListRecognizersRequest,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListRecognizersRequest,
          protos.google.cloud.speech.v2.IListRecognizersResponse|null|undefined,
          protos.google.cloud.speech.v2.IRecognizer>): void;
  listRecognizers(
      request?: protos.google.cloud.speech.v2.IListRecognizersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.speech.v2.IListRecognizersRequest,
          protos.google.cloud.speech.v2.IListRecognizersResponse|null|undefined,
          protos.google.cloud.speech.v2.IRecognizer>,
      callback?: PaginationCallback<
          protos.google.cloud.speech.v2.IListRecognizersRequest,
          protos.google.cloud.speech.v2.IListRecognizersResponse|null|undefined,
          protos.google.cloud.speech.v2.IRecognizer>):
      Promise<[
        protos.google.cloud.speech.v2.IRecognizer[],
        protos.google.cloud.speech.v2.IListRecognizersRequest|null,
        protos.google.cloud.speech.v2.IListRecognizersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.speech.v2.IListRecognizersRequest,
      protos.google.cloud.speech.v2.IListRecognizersResponse|null|undefined,
      protos.google.cloud.speech.v2.IRecognizer>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listRecognizers values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listRecognizers request %j', request);
    return this.innerApiCalls
      .listRecognizers(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.speech.v2.IRecognizer[],
        protos.google.cloud.speech.v2.IListRecognizersRequest|null,
        protos.google.cloud.speech.v2.IListRecognizersResponse
      ]) => {
        this._log.info('listRecognizers values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listRecognizers`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of Recognizers to list. The expected
 *   format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of Recognizers to return. The service may return fewer
 *   than this value. If unspecified, at most 5 Recognizers will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.speech.v2.Recognizer|Recognizer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listRecognizersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listRecognizersStream(
      request?: protos.google.cloud.speech.v2.IListRecognizersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listRecognizers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listRecognizers stream %j', request);
    return this.descriptors.page.listRecognizers.createStream(
      this.innerApiCalls.listRecognizers as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listRecognizers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of Recognizers to list. The expected
 *   format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of Recognizers to return. The service may return fewer
 *   than this value. If unspecified, at most 5 Recognizers will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListRecognizers|ListRecognizers} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.speech.v2.Recognizer|Recognizer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.list_recognizers.js</caption>
 * region_tag:speech_v2_generated_Speech_ListRecognizers_async
 */
  listRecognizersAsync(
      request?: protos.google.cloud.speech.v2.IListRecognizersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.speech.v2.IRecognizer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listRecognizers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listRecognizers iterate %j', request);
    return this.descriptors.page.listRecognizers.asyncIterate(
      this.innerApiCalls['listRecognizers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.speech.v2.IRecognizer>;
  }
 /**
 * Lists CustomClasses.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of CustomClass resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   Number of results per requests. A valid page_size ranges from 0 to 100
 *   inclusive. If the page_size is zero or unspecified, a page size of 5 will
 *   be chosen. If the page size exceeds 100, it will be coerced down to 100.
 *   Note that a call might return fewer results than the requested page size.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCustomClassesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCustomClasses(
      request?: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.ICustomClass[],
        protos.google.cloud.speech.v2.IListCustomClassesRequest|null,
        protos.google.cloud.speech.v2.IListCustomClassesResponse
      ]>;
  listCustomClasses(
      request: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListCustomClassesRequest,
          protos.google.cloud.speech.v2.IListCustomClassesResponse|null|undefined,
          protos.google.cloud.speech.v2.ICustomClass>): void;
  listCustomClasses(
      request: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListCustomClassesRequest,
          protos.google.cloud.speech.v2.IListCustomClassesResponse|null|undefined,
          protos.google.cloud.speech.v2.ICustomClass>): void;
  listCustomClasses(
      request?: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.speech.v2.IListCustomClassesRequest,
          protos.google.cloud.speech.v2.IListCustomClassesResponse|null|undefined,
          protos.google.cloud.speech.v2.ICustomClass>,
      callback?: PaginationCallback<
          protos.google.cloud.speech.v2.IListCustomClassesRequest,
          protos.google.cloud.speech.v2.IListCustomClassesResponse|null|undefined,
          protos.google.cloud.speech.v2.ICustomClass>):
      Promise<[
        protos.google.cloud.speech.v2.ICustomClass[],
        protos.google.cloud.speech.v2.IListCustomClassesRequest|null,
        protos.google.cloud.speech.v2.IListCustomClassesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.speech.v2.IListCustomClassesRequest,
      protos.google.cloud.speech.v2.IListCustomClassesResponse|null|undefined,
      protos.google.cloud.speech.v2.ICustomClass>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listCustomClasses values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listCustomClasses request %j', request);
    return this.innerApiCalls
      .listCustomClasses(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.speech.v2.ICustomClass[],
        protos.google.cloud.speech.v2.IListCustomClassesRequest|null,
        protos.google.cloud.speech.v2.IListCustomClassesResponse
      ]) => {
        this._log.info('listCustomClasses values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listCustomClasses`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of CustomClass resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   Number of results per requests. A valid page_size ranges from 0 to 100
 *   inclusive. If the page_size is zero or unspecified, a page size of 5 will
 *   be chosen. If the page size exceeds 100, it will be coerced down to 100.
 *   Note that a call might return fewer results than the requested page size.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.speech.v2.CustomClass|CustomClass} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCustomClassesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCustomClassesStream(
      request?: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCustomClasses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCustomClasses stream %j', request);
    return this.descriptors.page.listCustomClasses.createStream(
      this.innerApiCalls.listCustomClasses as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCustomClasses`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of CustomClass resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   Number of results per requests. A valid page_size ranges from 0 to 100
 *   inclusive. If the page_size is zero or unspecified, a page size of 5 will
 *   be chosen. If the page size exceeds 100, it will be coerced down to 100.
 *   Note that a call might return fewer results than the requested page size.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListCustomClasses|ListCustomClasses} must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.speech.v2.CustomClass|CustomClass}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.list_custom_classes.js</caption>
 * region_tag:speech_v2_generated_Speech_ListCustomClasses_async
 */
  listCustomClassesAsync(
      request?: protos.google.cloud.speech.v2.IListCustomClassesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.speech.v2.ICustomClass>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCustomClasses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCustomClasses iterate %j', request);
    return this.descriptors.page.listCustomClasses.asyncIterate(
      this.innerApiCalls['listCustomClasses'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.speech.v2.ICustomClass>;
  }
 /**
 * Lists PhraseSets.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of PhraseSet resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of PhraseSets to return. The service may return fewer
 *   than this value. If unspecified, at most 5 PhraseSets will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPhraseSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPhraseSets(
      request?: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.speech.v2.IPhraseSet[],
        protos.google.cloud.speech.v2.IListPhraseSetsRequest|null,
        protos.google.cloud.speech.v2.IListPhraseSetsResponse
      ]>;
  listPhraseSets(
      request: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListPhraseSetsRequest,
          protos.google.cloud.speech.v2.IListPhraseSetsResponse|null|undefined,
          protos.google.cloud.speech.v2.IPhraseSet>): void;
  listPhraseSets(
      request: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.speech.v2.IListPhraseSetsRequest,
          protos.google.cloud.speech.v2.IListPhraseSetsResponse|null|undefined,
          protos.google.cloud.speech.v2.IPhraseSet>): void;
  listPhraseSets(
      request?: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.speech.v2.IListPhraseSetsRequest,
          protos.google.cloud.speech.v2.IListPhraseSetsResponse|null|undefined,
          protos.google.cloud.speech.v2.IPhraseSet>,
      callback?: PaginationCallback<
          protos.google.cloud.speech.v2.IListPhraseSetsRequest,
          protos.google.cloud.speech.v2.IListPhraseSetsResponse|null|undefined,
          protos.google.cloud.speech.v2.IPhraseSet>):
      Promise<[
        protos.google.cloud.speech.v2.IPhraseSet[],
        protos.google.cloud.speech.v2.IListPhraseSetsRequest|null,
        protos.google.cloud.speech.v2.IListPhraseSetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      protos.google.cloud.speech.v2.IListPhraseSetsResponse|null|undefined,
      protos.google.cloud.speech.v2.IPhraseSet>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listPhraseSets values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listPhraseSets request %j', request);
    return this.innerApiCalls
      .listPhraseSets(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.speech.v2.IPhraseSet[],
        protos.google.cloud.speech.v2.IListPhraseSetsRequest|null,
        protos.google.cloud.speech.v2.IListPhraseSetsResponse
      ]) => {
        this._log.info('listPhraseSets values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listPhraseSets`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of PhraseSet resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of PhraseSets to return. The service may return fewer
 *   than this value. If unspecified, at most 5 PhraseSets will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPhraseSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPhraseSetsStream(
      request?: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPhraseSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPhraseSets stream %j', request);
    return this.descriptors.page.listPhraseSets.createStream(
      this.innerApiCalls.listPhraseSets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPhraseSets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project and location of PhraseSet resources to list. The
 *   expected format is `projects/{project}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of PhraseSets to return. The service may return fewer
 *   than this value. If unspecified, at most 5 PhraseSets will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to
 *   {@link protos.google.cloud.speech.v2.Speech.ListPhraseSets|ListPhraseSets} must match
 *   the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether, or not, to show resources that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.speech.v2.PhraseSet|PhraseSet}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/speech.list_phrase_sets.js</caption>
 * region_tag:speech_v2_generated_Speech_ListPhraseSets_async
 */
  listPhraseSetsAsync(
      request?: protos.google.cloud.speech.v2.IListPhraseSetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.speech.v2.IPhraseSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPhraseSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPhraseSets iterate %j', request);
    return this.descriptors.page.listPhraseSets.asyncIterate(
      this.innerApiCalls['listPhraseSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.speech.v2.IPhraseSet>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified config resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  configPath(project:string,location:string) {
    return this.pathTemplates.configPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Config resource.
   *
   * @param {string} configName
   *   A fully-qualified path representing Config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConfigName(configName: string) {
    return this.pathTemplates.configPathTemplate.match(configName).project;
  }

  /**
   * Parse the location from Config resource.
   *
   * @param {string} configName
   *   A fully-qualified path representing Config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConfigName(configName: string) {
    return this.pathTemplates.configPathTemplate.match(configName).location;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(project:string,location:string,keyRing:string,cryptoKey:string) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).location;
  }

  /**
   * Parse the key_ring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).crypto_key;
  }

  /**
   * Return a fully-qualified cryptoKeyVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @param {string} crypto_key_version
   * @returns {string} Resource name string.
   */
  cryptoKeyVersionPath(project:string,location:string,keyRing:string,cryptoKey:string,cryptoKeyVersion:string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
      crypto_key_version: cryptoKeyVersion,
    });
  }

  /**
   * Parse the project from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).project;
  }

  /**
   * Parse the location from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).location;
  }

  /**
   * Parse the key_ring from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).crypto_key;
  }

  /**
   * Parse the crypto_key_version from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the crypto_key_version.
   */
  matchCryptoKeyVersionFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).crypto_key_version;
  }

  /**
   * Return a fully-qualified customClass resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} custom_class
   * @returns {string} Resource name string.
   */
  customClassPath(project:string,location:string,customClass:string) {
    return this.pathTemplates.customClassPathTemplate.render({
      project: project,
      location: location,
      custom_class: customClass,
    });
  }

  /**
   * Parse the project from CustomClass resource.
   *
   * @param {string} customClassName
   *   A fully-qualified path representing CustomClass resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCustomClassName(customClassName: string) {
    return this.pathTemplates.customClassPathTemplate.match(customClassName).project;
  }

  /**
   * Parse the location from CustomClass resource.
   *
   * @param {string} customClassName
   *   A fully-qualified path representing CustomClass resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCustomClassName(customClassName: string) {
    return this.pathTemplates.customClassPathTemplate.match(customClassName).location;
  }

  /**
   * Parse the custom_class from CustomClass resource.
   *
   * @param {string} customClassName
   *   A fully-qualified path representing CustomClass resource.
   * @returns {string} A string representing the custom_class.
   */
  matchCustomClassFromCustomClassName(customClassName: string) {
    return this.pathTemplates.customClassPathTemplate.match(customClassName).custom_class;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified phraseSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} phrase_set
   * @returns {string} Resource name string.
   */
  phraseSetPath(project:string,location:string,phraseSet:string) {
    return this.pathTemplates.phraseSetPathTemplate.render({
      project: project,
      location: location,
      phrase_set: phraseSet,
    });
  }

  /**
   * Parse the project from PhraseSet resource.
   *
   * @param {string} phraseSetName
   *   A fully-qualified path representing PhraseSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPhraseSetName(phraseSetName: string) {
    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).project;
  }

  /**
   * Parse the location from PhraseSet resource.
   *
   * @param {string} phraseSetName
   *   A fully-qualified path representing PhraseSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPhraseSetName(phraseSetName: string) {
    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).location;
  }

  /**
   * Parse the phrase_set from PhraseSet resource.
   *
   * @param {string} phraseSetName
   *   A fully-qualified path representing PhraseSet resource.
   * @returns {string} A string representing the phrase_set.
   */
  matchPhraseSetFromPhraseSetName(phraseSetName: string) {
    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).phrase_set;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified recognizer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} recognizer
   * @returns {string} Resource name string.
   */
  recognizerPath(project:string,location:string,recognizer:string) {
    return this.pathTemplates.recognizerPathTemplate.render({
      project: project,
      location: location,
      recognizer: recognizer,
    });
  }

  /**
   * Parse the project from Recognizer resource.
   *
   * @param {string} recognizerName
   *   A fully-qualified path representing Recognizer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRecognizerName(recognizerName: string) {
    return this.pathTemplates.recognizerPathTemplate.match(recognizerName).project;
  }

  /**
   * Parse the location from Recognizer resource.
   *
   * @param {string} recognizerName
   *   A fully-qualified path representing Recognizer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRecognizerName(recognizerName: string) {
    return this.pathTemplates.recognizerPathTemplate.match(recognizerName).location;
  }

  /**
   * Parse the recognizer from Recognizer resource.
   *
   * @param {string} recognizerName
   *   A fully-qualified path representing Recognizer resource.
   * @returns {string} A string representing the recognizer.
   */
  matchRecognizerFromRecognizerName(recognizerName: string) {
    return this.pathTemplates.recognizerPathTemplate.match(recognizerName).recognizer;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.speechStub && !this._terminated) {
      return this.speechStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}