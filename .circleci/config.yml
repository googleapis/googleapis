version: 2.1

executors:
  golang-executor:
    docker:
      - image: cimg/go:1.16

jobs:
  build-artifact:
    executor: golang-executor
    resource_class: xlarge
    working_directory: /tmp/src/googleapis
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Install Protoc"
          command: |
            mkdir /tmp/protoc
            PROTOC_ZIP=protoc-3.19.1-linux-x86_64.zip
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/$PROTOC_ZIP
            sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
            sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
            rm -f $PROTOC_ZIP
            sudo chmod +x /usr/local/bin/protoc
            protoc --version
      - run:
          name: "Clone google-cloud-go that contains gapgen app"
          working_directory: "/tmp/src/cloud.google.com/go"
          description: "Google like to break things, so ensure that google-cloud-go is up to date, but still working"
          command: |
            git clone https://github.com/googleapis/google-cloud-go.git .
            git checkout tags/v0.100.0
            grep -rl 'google.golang.org/genproto/googleapis/ads' ./internal/gapicgen/generator |
            xargs sed --in-place=backup 's,google.golang.org/genproto/googleapis/ads,google.golang.org/genproto/googleapis/ads_disabled,g'
      - run:
          name: "Build genbot binary"
          working_directory: "/tmp/src/cloud.google.com/go/internal/gapicgen/cmd"
          command: |
            mkdir -p /tmp/run
            go build -o /tmp/src/genbot cloud.google.com/go/internal/gapicgen/cmd/genbot
      - checkout
      - run:
          name: "Build package"
          working_directory: "/tmp/run"
          description: "Build package, but before it ensure that all tools are up to date, sometimes it causes issues"
          command: |
            go get \
              github.com/golang/protobuf/protoc-gen-go \
              golang.org/x/lint/golint \
              golang.org/x/tools/cmd/goimports \
              honnef.co/go/tools/cmd/staticcheck \
              github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic
            /tmp/src/genbot \
              -local \
              -forceAll \
              -gocloud-dir=/tmp/src \
              -googleapis-dir=/tmp/src/googleapis \
              -gapic="google.golang.org/google/ads/googleads"
      - run:
          name: "Zip results"
          when: always
          command: |
            mkdir -p /tmp/artifacts
            mv /tmp/update-genproto* /tmp/update-genproto
            zip -r /tmp/artifacts/artifacts.zip /tmp/update-genproto/genproto/*
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: "Publish Release for googleapis on GitHub"
          command: |
            go get github.com/tcnksm/ghr

            ghr -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -delete ${CIRCLE_TAG} \
              /tmp/artifacts/artifacts.zip
      - run:
          name: "Create release for go-genproto on GitHub"
          working_directory: "/tmp/git"
          command: |
            git clone https://github.com/RedVentures/go-genproto.git
            rm -rf /tmp/update-genproto/genproto/.git
            cp -R -a /tmp/update-genproto/genproto/. go-genproto/
            cd go-genproto
            ls -lah
            git switch -C update-genproto-${CIRCLE_TAG}
            git add .
            git config --global user.email "sematic-it@redventures.com"
            git config --global user.name "Sematic Protobuf Generator"
            git commit -m "Update genproto to ${CIRCLE_TAG}"
            git remote remove origin
            git remote add origin https://${GITHUB_TOKEN}@github.com/RedVentures/go-genproto.git
            git push origin update-genproto-${CIRCLE_TAG}
            ghr -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r go-genproto \
              -c $(git rev-parse HEAD) \
              -delete ${CIRCLE_TAG} \
              /tmp/artifacts/artifacts.zip

workflows:
  version: 2

  build-artifact:
    jobs:
      - build-artifact:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d.*/
